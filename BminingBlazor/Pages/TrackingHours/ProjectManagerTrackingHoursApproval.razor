@page "/project_manager_dashboard"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http

@inject IMatDialogService MatDialogService
@inject ITimeTrackingService TimeTrackingService
@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .item-dashboard-container {
        display: inline-grid;
        grid-template-columns: auto 1fr auto;
        grid-column-gap: 0px;
        align-items: center
    }

    .item-dashboard-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
        padding: 5px
    }
</style>


<div class="bmining-app">
    <h2 class="header-break">@Resource.DashboardProjectManager</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (ViewModel != null)
    {

        @foreach (var proext in _projectsExtraordinary)
        {
            <h4>@proext.MyProjectName</h4>
            <table>
                <tr>
                    <th>@Resource.Name</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>

                @*@foreach (var projectManagerTrackingHoursProjectMember in projectManagerTrackingHoursProject.OurProjectManagerTrackingHoursProjectMembers)
                {
                    <tr>
                        <td>
                            @projectManagerTrackingHoursProjectMember.MyMemberName
                        </td>
                        <td>
                            @projectManagerTrackingHoursProjectMember.MyHoursLoaded
                        </td>
                        <td>
                            @projectManagerTrackingHoursProjectMember.DateOfHours.ToLongDateString()
                        </td>
                        <td class="text-center">
                            <button @onclick="() => RejectHours(projectManagerTrackingHoursProject,projectManagerTrackingHoursProjectMember)" class="btn-disapproved float-left">
                            </button>
                            <button @onclick="() => ApproveHours(projectManagerTrackingHoursProject,projectManagerTrackingHoursProjectMember)" class="btn-approved">
                            </button>
                        </td>
                    </tr>
                }*@
            </table>
            <div class="alternate1-break"></div>
        }
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }

</div>


@code {
    [Parameter]
    public int? Day { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Year { get; set; }
    private DateTime _mySelectedDate;
    public List<ProjectTrackingWeekViewModel> _projectExtraordinary = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectsExtraordinary = new List<ProjectTrackingWeekViewModel>();
    public DateTime MyStartOfWeek { get; set; }
    public DateTime MySelectedDate
    {
        get { return _mySelectedDate; }
        set
        {
            _mySelectedDate = value;
            var dayOfWeek = value.DayOfWeek;
            int numberOfDay;
            switch (dayOfWeek)
            {
                case DayOfWeek.Saturday:
                    numberOfDay = 0;
                    break;
                case DayOfWeek.Sunday:
                    numberOfDay = 1;
                    break;
                case DayOfWeek.Monday:
                    numberOfDay = 2;
                    break;
                case DayOfWeek.Tuesday:
                    numberOfDay = 3;
                    break;
                case DayOfWeek.Wednesday:
                    numberOfDay = 4;
                    break;
                case DayOfWeek.Thursday:
                    numberOfDay = 5;
                    break;
                case DayOfWeek.Friday:
                    numberOfDay = 6;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }


            MyStartOfWeek = DateTime.UtcNow.AddDays(-numberOfDay);

            this.StateHasChanged();

        }
    }


    public ProjectManagerTrackingHoursApprovalViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var id = await UserDataService.GetUserId(await AuthenticationStateProvider.GetEmail());
            if (!Day.HasValue || !Month.HasValue || !Year.HasValue)
            {
                var date = DateTime.UtcNow.ToLocalTime();
                MySelectedDate = new DateTime(date.Year, date.Month, date.Day);
            }
            else MySelectedDate = new DateTime(Year.Value, Month.Value, Day.Value);
            var _projectsExtra = await TimeTrackingService.GetProjectExtraordinaryByManager(id,MyStartOfWeek,MyStartOfWeek.AddDays(6));
            foreach (var pro in _projectsExtra)
            {
                _projectExtraordinary = await TimeTrackingService.GetPendingWeekExtraordinaryFromManager(pro.MyProjectId, id, MyStartOfWeek, MyStartOfWeek.AddDays(6));
                _projectsExtraordinary.AddRange(_projectExtraordinary);
            }
            ViewModel = await TimeTrackingService.GetPendingTimeTrackingHoursByProjectManager(id);
            StateHasChanged();
        }
    }

    private async Task ApproveHours(ProjectManagerTrackingHoursProjectViewModel projectManagerTrackingHoursProject,
                                    ProjectManagerTrackingHoursProjectMemberViewModel projectManagerTrackingHoursProjectMember)
    {
        await TimeTrackingService.ApproveUserTimeTracking(projectManagerTrackingHoursProjectMember.TimeTrackingHoursId);
        projectManagerTrackingHoursProject.OurProjectManagerTrackingHoursProjectMembers.Remove(projectManagerTrackingHoursProjectMember);
    }

    private async Task RejectHours(ProjectManagerTrackingHoursProjectViewModel projectManagerTrackingHoursProject,
                                   ProjectManagerTrackingHoursProjectMemberViewModel projectManagerTrackingHoursProjectMember)
    {
        var reasons = await MatDialogService.PromptAsync(Resource.Reasons);
        if (string.IsNullOrEmpty(reasons)) return;
        await TimeTrackingService.RejectUserTimeTracking(projectManagerTrackingHoursProjectMember.TimeTrackingHoursId, reasons);
        projectManagerTrackingHoursProject.OurProjectManagerTrackingHoursProjectMembers.Remove(projectManagerTrackingHoursProjectMember);
    }
}
