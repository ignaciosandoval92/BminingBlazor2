@page "/admin_dashboard"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using BminingBlazor.ViewModels.Projects
@using System.Net;
@using System.Net.Mail;
@inject IMatDialogService MatDialogService
@inject ITimeTrackingService TimeTrackingService
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .item-dashboard-container {
        display: inline-grid;
        grid-template-columns: auto 1fr auto;
        grid-column-gap: 0px;
        align-items: center
    }

    .item-dashboard-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
        padding: 5px
    }
</style>


<div class="bmining-app">
    <h2 class="header-break">@Resource.DashboardProjectManager</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (!IsLoading)
    {
        <h4 class="header-break">@Resource.Week @MyStartOfWeek.ToString("d MMMM yyyy")</h4>
        <div class="alternate2-break"></div>
        <h5 class="header-break">@Resource.OrdinaryHours</h5>
        <div class="alternate2-break"></div>
        @foreach (var proord in _projectsOrdi)
        {
            <h6>@proord.MyProjectName</h6>
            <table>
                <tr>
                    <th>@Resource.Email</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
                @foreach (var pro in _projectsOrdinary)
                {
                    if (proord.MyProjectId == pro.MyProjectId)
                    {
                        <tr>
                            <td>@pro.MyUserEmail</td>
                            <td>@pro.TrackedHoursSat</td>
                            <td>@pro.TrackedHoursSun</td>
                            <td>@pro.TrackedHoursMon</td>
                            <td>@pro.TrackedHoursTue</td>
                            <td>@pro.TrackedHoursWed</td>
                            <td>@pro.TrackedHoursThu</td>
                            <td>@pro.TrackedHoursFri</td>
                            <td>
                                <button class="btn-approved" @onclick="()=>ApproveHoursOrdinary(pro)"></button>
                                <button class="btn-disapproved" @onclick="()=>RejectHoursOrdinary(pro)"></button>
                            </td>
                        </tr>
                    }

                }

            </table>
            <div class="alternate1-break"></div>
        }
        <h5 class="header-break">@Resource.ExtraordinaryHours</h5>
        <div class="alternate2-break"></div>
        @foreach (var proext in _projectsExtra)
        {
            <h6>@proext.MyProjectName</h6>
            <table>
                <tr>
                    <th>@Resource.Email</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
                @foreach (var pro in _projectsExtraordinary)
                {
                    if (proext.MyProjectId == pro.MyProjectId)
                    {
                        <tr>
                            <td>@pro.MyUserEmail</td>
                            <td>@pro.TrackedHoursSat</td>
                            <td>@pro.TrackedHoursSun</td>
                            <td>@pro.TrackedHoursMon</td>
                            <td>@pro.TrackedHoursTue</td>
                            <td>@pro.TrackedHoursWed</td>
                            <td>@pro.TrackedHoursThu</td>
                            <td>@pro.TrackedHoursFri</td>
                            <td>
                                <button class="btn-approved" @onclick="()=>ApproveHoursExtraordinary(pro)"></button>
                                <button class="btn-disapproved" @onclick="()=>RejectHoursExtraordinary(pro)"></button>
                            </td>
                        </tr>
                    }

                }

            </table>
            <div class="alternate1-break"></div>
        }


        <h4 class="header-break">@Resource.Week @MyStartOfWeek.AddDays(-7).ToString("d MMMM yyyy")</h4>
        <div class="alternate2-break"></div>
        <h5 class="header-break">@Resource.OrdinaryHours</h5>
        <div class="alternate2-break"></div>
        @foreach (var proord in _projectsOrdiLastWeek)
        {
            <h6>@proord.MyProjectName</h6>
            <table>
                <tr>
                    <th>@Resource.Email</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
                @foreach (var pro in _projectsOrdinaryLastWeek)
                {
                    if (proord.MyProjectId == pro.MyProjectId)
                    {
                        <tr>
                            <td>@pro.MyUserEmail</td>
                            <td>@pro.TrackedHoursSat</td>
                            <td>@pro.TrackedHoursSun</td>
                            <td>@pro.TrackedHoursMon</td>
                            <td>@pro.TrackedHoursTue</td>
                            <td>@pro.TrackedHoursWed</td>
                            <td>@pro.TrackedHoursThu</td>
                            <td>@pro.TrackedHoursFri</td>
                            <td>
                                <button class="btn-approved" @onclick="()=>ApproveHoursOrdinaryLastWeek(pro)"></button>
                                <button class="btn-disapproved" @onclick="()=>RejectHoursOrdinaryLastWeek(pro)"></button>
                            </td>
                        </tr>
                    }

                }

            </table>
            <div class="alternate1-break"></div>
        }
        <h5 class="header-break">@Resource.ExtraordinaryHours</h5>
        <div class="alternate2-break"></div>
        @foreach (var proext in _projectsExtraLastWeek)
        {
            <h6>@proext.MyProjectName</h6>
            <table>
                <tr>
                    <th>@Resource.Email</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
                @foreach (var pro in _projectsExtraordinaryLastWeek)
                {
                    if (proext.MyProjectId == pro.MyProjectId)
                    {
                        <tr>
                            <td>@pro.MyUserEmail</td>
                            <td>@pro.TrackedHoursSat</td>
                            <td>@pro.TrackedHoursSun</td>
                            <td>@pro.TrackedHoursMon</td>
                            <td>@pro.TrackedHoursTue</td>
                            <td>@pro.TrackedHoursWed</td>
                            <td>@pro.TrackedHoursThu</td>
                            <td>@pro.TrackedHoursFri</td>
                            <td>
                                <button class="btn-approved" @onclick="()=>ApproveHoursExtraordinaryLastWeek(pro)"></button>
                                <button class="btn-disapproved" @onclick="()=>RejectHoursExtraordinaryLastWeek(pro)"></button>
                            </td>
                        </tr>
                    }

                }

            </table>
            <div class="alternate1-break"></div>
        }
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }

</div>

@code {
    [Parameter]
    public int? Day { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Year { get; set; }
    private DateTime _mySelectedDate;
    public List<ProjectTrackingWeekViewModel> _projectExtraordinary = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectsExtraordinary = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectOrdinary = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectsOrdinary = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectResumeViewModel> _projectsExtra = new List<ProjectResumeViewModel>();
    public List<ProjectResumeViewModel> _projectsOrdi = new List<ProjectResumeViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectExtraordinaryLastWeek = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectsExtraordinaryLastWeek = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectOrdinaryLastWeek = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectTrackingWeekViewModel> _projectsOrdinaryLastWeek = new List<ProjectTrackingWeekViewModel>();
    public List<ProjectResumeViewModel> _projectsExtraLastWeek = new List<ProjectResumeViewModel>();
    public List<ProjectResumeViewModel> _projectsOrdiLastWeek = new List<ProjectResumeViewModel>();
    public bool IsLoading = true;
    public DateTime MyStartOfWeek { get; set; }
    public DateTime MySelectedDate
    {
        get { return _mySelectedDate; }
        set
        {
            _mySelectedDate = value;
            var dayOfWeek = value.DayOfWeek;
            int numberOfDay;
            switch (dayOfWeek)
            {
                case DayOfWeek.Saturday:
                    numberOfDay = 0;
                    break;
                case DayOfWeek.Sunday:
                    numberOfDay = 1;
                    break;
                case DayOfWeek.Monday:
                    numberOfDay = 2;
                    break;
                case DayOfWeek.Tuesday:
                    numberOfDay = 3;
                    break;
                case DayOfWeek.Wednesday:
                    numberOfDay = 4;
                    break;
                case DayOfWeek.Thursday:
                    numberOfDay = 5;
                    break;
                case DayOfWeek.Friday:
                    numberOfDay = 6;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }


            MyStartOfWeek = DateTime.UtcNow.AddDays(-numberOfDay);

            this.StateHasChanged();

        }
    }
    public ProjectManagerTrackingHoursApprovalViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var id = await UserDataService.GetUserId(await AuthenticationStateProvider.GetEmail());
            if (!Day.HasValue || !Month.HasValue || !Year.HasValue)
            {
                var date = DateTime.UtcNow.ToLocalTime();
                MySelectedDate = new DateTime(date.Year, date.Month, date.Day);
            }
            else MySelectedDate = new DateTime(Year.Value, Month.Value, Day.Value);
            _projectsOrdi = await TimeTrackingService.GetProjectOrdinaryByAdmin(id, MyStartOfWeek, MyStartOfWeek.AddDays(6));
            foreach (var pro in _projectsOrdi)
            {
                _projectOrdinary = await TimeTrackingService.GetPendingWeekOrdinaryFromAdmin(pro.MyProjectId, id, MyStartOfWeek, MyStartOfWeek.AddDays(6));
                _projectsOrdinary.AddRange(_projectOrdinary);
            }
            _projectsOrdiLastWeek = await TimeTrackingService.GetProjectOrdinaryByAdmin(id, MyStartOfWeek.AddDays(-7), MyStartOfWeek.AddDays(-1));
            foreach (var pro in _projectsOrdiLastWeek)
            {
                _projectOrdinaryLastWeek = await TimeTrackingService.GetPendingWeekOrdinaryFromAdmin(pro.MyProjectId, id, MyStartOfWeek.AddDays(-7), MyStartOfWeek.AddDays(-1));
                _projectsOrdinaryLastWeek.AddRange(_projectOrdinaryLastWeek);
            }
            _projectsExtra = await TimeTrackingService.GetProjectExtraordinaryByAdmin(id, MyStartOfWeek, MyStartOfWeek.AddDays(6));
            foreach (var pro in _projectsExtra)
            {
                _projectExtraordinary = await TimeTrackingService.GetPendingWeekExtraordinaryFromAdmin(pro.MyProjectId, id, MyStartOfWeek, MyStartOfWeek.AddDays(6));
                _projectsExtraordinary.AddRange(_projectExtraordinary);
            }
            _projectsExtraLastWeek = await TimeTrackingService.GetProjectExtraordinaryByAdmin(id, MyStartOfWeek.AddDays(-7), MyStartOfWeek.AddDays(-1));
            foreach (var pro in _projectsExtraLastWeek)
            {
                _projectExtraordinaryLastWeek = await TimeTrackingService.GetPendingWeekExtraordinaryFromAdmin(pro.MyProjectId, id, MyStartOfWeek.AddDays(-7), MyStartOfWeek.AddDays(-1));
                _projectsExtraordinaryLastWeek.AddRange(_projectExtraordinaryLastWeek);
            }
            IsLoading = false;
            StateHasChanged();
        }
    }


    private async Task RejectHoursOrdinary(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        var reasons = await MatDialogService.PromptAsync(Resource.Reasons);
        if (string.IsNullOrEmpty(reasons))
        {
            IsLoading = false;
            return;
        }
        await TimeTrackingService.RejectUserTimeTracking(project.IdSat);
        await TimeTrackingService.RejectUserTimeTracking(project.IdSun);
        await TimeTrackingService.RejectUserTimeTracking(project.IdMon);
        await TimeTrackingService.RejectUserTimeTracking(project.IdTue);
        await TimeTrackingService.RejectUserTimeTracking(project.IdWed);
        await TimeTrackingService.RejectUserTimeTracking(project.IdThu);
        await TimeTrackingService.RejectUserTimeTracking(project.IdFri);
        var smtpClient = new SmtpClient("mail.bmining.cl")
        {
            Port = 587,
            Credentials = new NetworkCredential("hours@bmining.cl", "BminingChile2021"),
            EnableSsl = true
        };

        smtpClient.Send("hours@bmining.cl", project.MyUserEmail, $"{Resource.HoursRejected} {project.MyProjectCode} / {project.MyProjectName} ", reasons);
        _projectsOrdinary.Remove(project);
        IsLoading = false;

    }
    private async Task RejectHoursOrdinaryLastWeek(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        var reasons = await MatDialogService.PromptAsync(Resource.Reasons);
        if (string.IsNullOrEmpty(reasons))
        {
            IsLoading = false;
            return;
        }
        await TimeTrackingService.RejectUserTimeTracking(project.IdSat);
        await TimeTrackingService.RejectUserTimeTracking(project.IdSun);
        await TimeTrackingService.RejectUserTimeTracking(project.IdMon);
        await TimeTrackingService.RejectUserTimeTracking(project.IdTue);
        await TimeTrackingService.RejectUserTimeTracking(project.IdWed);
        await TimeTrackingService.RejectUserTimeTracking(project.IdThu);
        await TimeTrackingService.RejectUserTimeTracking(project.IdFri);
        var smtpClient = new SmtpClient("mail.bmining.cl")
        {
            Port = 587,
            Credentials = new NetworkCredential("hours@bmining.cl", "BminingChile2021"),
            EnableSsl = true
        };

        smtpClient.Send("hours@bmining.cl", project.MyUserEmail, $"{Resource.HoursRejected} {project.MyProjectCode} / {project.MyProjectName} ", reasons);
        _projectsOrdinaryLastWeek.Remove(project);
        IsLoading = false;

    }
    private async Task RejectHoursExtraordinary(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        var reasons = await MatDialogService.PromptAsync(Resource.Reasons);
        if (string.IsNullOrEmpty(reasons))
        {
            IsLoading = false;
            return;
        }
        await TimeTrackingService.RejectUserTimeTracking(project.IdSat);
        await TimeTrackingService.RejectUserTimeTracking(project.IdSun);
        await TimeTrackingService.RejectUserTimeTracking(project.IdMon);
        await TimeTrackingService.RejectUserTimeTracking(project.IdTue);
        await TimeTrackingService.RejectUserTimeTracking(project.IdWed);
        await TimeTrackingService.RejectUserTimeTracking(project.IdThu);
        await TimeTrackingService.RejectUserTimeTracking(project.IdFri);
        var smtpClient = new SmtpClient("mail.bmining.cl")
        {
            Port = 587,
            Credentials = new NetworkCredential("hours@bmining.cl", "BminingChile2021"),
            EnableSsl = true
        };

        smtpClient.Send("hours@bmining.cl", project.MyUserEmail, $"{Resource.HoursRejected} {project.MyProjectCode} / {project.MyProjectName} ", reasons);
        _projectsExtraordinary.Remove(project);
        IsLoading = false;
    }
    private async Task RejectHoursExtraordinaryLastWeek(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        var reasons = await MatDialogService.PromptAsync(Resource.Reasons);
        if (string.IsNullOrEmpty(reasons))
        {
            IsLoading = false;
            return;
        }
        await TimeTrackingService.RejectUserTimeTracking(project.IdSat);
        await TimeTrackingService.RejectUserTimeTracking(project.IdSun);
        await TimeTrackingService.RejectUserTimeTracking(project.IdMon);
        await TimeTrackingService.RejectUserTimeTracking(project.IdTue);
        await TimeTrackingService.RejectUserTimeTracking(project.IdWed);
        await TimeTrackingService.RejectUserTimeTracking(project.IdThu);
        await TimeTrackingService.RejectUserTimeTracking(project.IdFri);
        var smtpClient = new SmtpClient("mail.bmining.cl")
        {
            Port = 587,
            Credentials = new NetworkCredential("hours@bmining.cl", "BminingChile2021"),
            EnableSsl = true
        };

        smtpClient.Send("hours@bmining.cl", project.MyUserEmail, $"{Resource.HoursRejected} {project.MyProjectCode} / {project.MyProjectName} ", reasons);
        _projectsExtraordinaryLastWeek.Remove(project);
        IsLoading = false;
    }
    private async Task ApproveHoursOrdinary(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSat);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSun);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdMon);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdTue);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdWed);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdThu);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdFri);
        _projectsOrdinary.Remove(project);
        IsLoading = false;

    }
    private async Task ApproveHoursOrdinaryLastWeek(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSat);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSun);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdMon);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdTue);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdWed);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdThu);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdFri);
        _projectsOrdinaryLastWeek.Remove(project);
        IsLoading = false;

    }
    private async Task ApproveHoursExtraordinary(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSat);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSun);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdMon);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdTue);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdWed);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdThu);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdFri);
        _projectsExtraordinary.Remove(project);
        IsLoading = false;

    }
    private async Task ApproveHoursExtraordinaryLastWeek(ProjectTrackingWeekViewModel project)
    {
        IsLoading = true;
        await Task.Delay(500);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSat);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdSun);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdMon);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdTue);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdWed);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdThu);
        await TimeTrackingService.ApproveUserTimeTracking(project.IdFri);
        _projectsExtraordinaryLastWeek.Remove(project);
        IsLoading = false;

    }
}