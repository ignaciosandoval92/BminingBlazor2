@page "/EditHours/{userId:int}/{startDate:datetime}/{endDate:datetime}"
@using BminingBlazor.ViewModels.ActivityRecord
@using Models.ActivityRecord
@using BminingBlazor.ViewModels.Projects
@using BminingBlazor.ViewModels.TrackingHours
@inject IMatDialogService MatDialogService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager

<style>
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
    }
</style>
<div class="bmining-app">

    <h3>@Resource.Edit</h3>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>
    @if (IsLoading)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
    <h6 class="header-break">@Resource.OrdinaryHours</h6>
    <div class="alternate2-break"></div>
    <table>
        <thead>
            <tr>
                <th>@Resource.Project</th>
                <th>Sab</th>
                <th>Dom</th>
                <th>Lun</th>
                <th>Mar</th>
                <th>Mie</th>
                <th>Jue</th>
                <th>Vie</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proord in _projectsOrdinary)
            {
                <tr>
                    <td>@proord.MyProjectCode<br /><txt>@proord.MyProjectName</txt></td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursSat" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursSat
                        }
                    </td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursSun" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursSun
                        }
                    </td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursMon" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursMon
                        }
                    </td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursTue" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursTue
                        }
                    </td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursWed" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursWed
                        }
                    </td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursThu" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursThu
                        }
                    </td>
                    <td>
                        @if (proord.SendHours == 0)
                        {
                            <input type="number" @bind="@proord.TrackedHoursFri" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proord.TrackedHoursFri
                        }
                    </td>

                </tr>
            }
            
        <tr>

            <td>@Resource.TotalHours:</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(0)</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(1)</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(2)</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(3)</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(4)</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(5)</td>
            <td>@TotalHours(_projectsOrdinary).ElementAt(6)</td>

        </tr>

        </tbody>
    </table>
    <h6 class="header-break">@Resource.ExtraordinaryHours</h6>
    <div class="alternate2-break"></div>
    <table>
        <thead>
            <tr>
                <th>@Resource.Project</th>
                <th>Sab</th>
                <th>Dom</th>
                <th>Lun</th>
                <th>Mar</th>
                <th>Mie</th>
                <th>Jue</th>
                <th>Vie</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proext in _projectsExtraordinary)
            {
                <tr>
                    <td>@proext.MyProjectCode<br /><txt>@proext.MyProjectName</txt></td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursSat" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursSat
                        }
                    </td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursSun" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursSun
                        }
                    </td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursMon" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursMon
                        }
                    </td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursTue" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursTue
                        }
                    </td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursWed" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursWed
                        }
                    </td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursThu" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursThu
                        }
                    </td>
                    <td>
                        @if (proext.SendHours == 0)
                        {
                            <input type="number" @bind="@proext.TrackedHoursFri" class="form-control" id="inputHours">
                        }
                        else
                        {
                            @proext.TrackedHoursFri
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="() => SaveHours(_projectsOrdinary, _projectsExtraordinary)" class="bmining-button ">@Resource.Save</button>
    }
</div>

@code {

        [Parameter]
        public int userId { get; set; }
        [Parameter]
        public DateTime startDate { get; set; }
        [Parameter]
        public DateTime endDate { get; set; }



    public List<double> MyHours;
    public double MyHoursSat { get; set; }
    public double MyHoursSun { get; set; }
    public double MyHoursMon { get; set; }
    public double MyHoursTue { get; set; }
    public double MyHoursWed { get; set; }
    public double MyHoursThu { get; set; }
    public double MyHoursFri { get; set; }
    public double TotalHoursSat { get; set; }
    public double TotalHoursSun { get; set; }
    public double TotalHoursMon { get; set; }
    public double TotalHoursTue { get; set; }
    public double TotalHoursWed { get; set; }
    public double TotalHoursThu { get; set; }
    public double TotalHoursFri { get; set; }
    public ProjectTrackingWeekViewModel _projectOrdinary = new ProjectTrackingWeekViewModel();
    public List<ProjectTrackingWeekViewModel> _projectsOrdinary = new List<ProjectTrackingWeekViewModel>();
    public ProjectTrackingWeekViewModel _projectExtraordinary = new ProjectTrackingWeekViewModel();
    public List<ProjectTrackingWeekViewModel> _projectsExtraordinary = new List<ProjectTrackingWeekViewModel>();
    bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var chargedProjectsOrdinary = await TimeTrackingService.ChargedProjectOrdinary(userId, startDate, endDate);
            foreach (var i in chargedProjectsOrdinary)
            {
                _projectOrdinary = await TimeTrackingService.ReadProjectWeekOrdinary(i.MyProjectId, userId, startDate, endDate);
                _projectsOrdinary.Add(_projectOrdinary);
            }
            var chargedProjectsExtraordinary = await TimeTrackingService.ChargedProjectExtraordinary(userId, startDate, endDate);
            foreach (var i in chargedProjectsExtraordinary)
            {
                _projectExtraordinary = await TimeTrackingService.ReadProjectWeekExtraordinary(i.MyProjectId, userId, startDate, endDate);
                _projectsExtraordinary.Add(_projectExtraordinary);
            }
            IsLoading = false;
            StateHasChanged();
        }
    }
    public async Task SaveHours(List<ProjectTrackingWeekViewModel> projectsordinary, List<ProjectTrackingWeekViewModel> projectsextraordinary)
    {
        IsLoading = true;
        await Task.Delay(500);
        foreach (var pro in projectsordinary)
        {
            if (pro.SendHours == 0)
            {
                await TimeTrackingService.EditStatusTimeTracking(pro.IdSat, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursSat);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdSun, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursSun);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdMon, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursMon);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdTue, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursTue);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdWed, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursWed);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdThu, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursThu);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdFri, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursFri);
            }
        }
        foreach (var pro in projectsextraordinary)
        {
            if (pro.SendHours == 0)
            {
                await TimeTrackingService.EditStatusTimeTracking(pro.IdSat, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursSat);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdSun, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursSun);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdMon, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursMon);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdTue, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursTue);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdWed, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursWed);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdThu, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursThu);
                await TimeTrackingService.EditStatusTimeTracking(pro.IdFri, Models.TimeTracking.TimeTrackingStatusEnum.WaitingForApproval, pro.TrackedHoursFri);
            }
        }
        NavigationManager.NavigateTo("/dashboard_tracking_hours", true);
    }
    public List<double> TotalHours(List<ProjectTrackingWeekViewModel> project)
    {
        TotalHoursSat = 0;
        TotalHoursSun = 0;
        TotalHoursMon = 0;
        TotalHoursTue = 0;
        TotalHoursWed = 0;
        TotalHoursThu = 0;
        TotalHoursFri = 0;
        List<double> TotalHours = new List<double>();
        foreach (var proord in project)
        {
            TotalHoursSat = proord.TrackedHoursSat + TotalHoursSat;
            TotalHoursSun = proord.TrackedHoursSun + TotalHoursSun;
            TotalHoursMon = proord.TrackedHoursMon + TotalHoursMon;
            TotalHoursTue = proord.TrackedHoursTue + TotalHoursTue;
            TotalHoursWed = proord.TrackedHoursWed + TotalHoursWed;
            TotalHoursThu = proord.TrackedHoursThu + TotalHoursThu;
            TotalHoursFri = proord.TrackedHoursFri + TotalHoursFri;
        }
        TotalHours.Add(TotalHoursSat);
        TotalHours.Add(TotalHoursSun);
        TotalHours.Add(TotalHoursMon);
        TotalHours.Add(TotalHoursTue);
        TotalHours.Add(TotalHoursWed);
        TotalHours.Add(TotalHoursThu);
        TotalHours.Add(TotalHoursFri);
        return TotalHours;
    }
}
