@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using BminingBlazor.ViewModels.Projects

@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager
@inject IDummyProjectDataService DummyProjectDataService
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .load-hours-container {
        display: inline-grid;
        grid-template-rows: auto 1fr auto 1fr;
    }

    .load-hours-item {
        display: inline;
    }


    .load-hours-label {
        font-size: 22px
    }
</style>

<div class="bmining-app">

    <h2 class="header-break">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (!IsLoading)
    {
        <div class="form-group">
            <MatAutocompleteList Items="@ViewModel?.OurAvailableProjects" TItem="ProjectResumeViewModel" FullWidth="true" CustomStringSelector="@(i => i?.MyProjectCode + " " + i?.MyProjectName)" Label="@Resource.Projects" @bind-Value="@value" ShowClearButton="true">
                <ItemTemplate>
                    <div style="display: flex; flex-direction: row; width: 100%;">
                        <div style="flex:1;">@context.MyProjectCode</div>
                        <div style="flex:1;">@context.MyProjectName</div>
                    </div>
                </ItemTemplate>
            </MatAutocompleteList>
        </div>

        <div class="form-group">
            <label for="inputHours" class="load-hours-label">@Resource.InvestedHours</label>
            <input type="number" @bind="@ViewModel.MyHours" class="form-control" id="inputHours" placeholder="@Resource.InvestedHours">
        </div>

        <div class="w-100">
            <button class="bmining-button float-right" @onclick="()=>LoadHours()">@Resource.Load</button>
        </div>

    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
</div>

@code {
    [Parameter]
    public int Day { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }


    public bool IsLoading { get; set; }
    ProjectResumeViewModel value = null;
    public AddUserTimeTrackingViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        var projectsBelongsUserId = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);

        ViewModel = new AddUserTimeTrackingViewModel(userId)
        {
            MyTrackingHourDate = new DateTime(Year, Month, Day),
        };
        ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
        ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
    }

    private async Task LoadHours()
    {
        ViewModel.MySelectedProjectId = value.MyProjectId;
        if (!ViewModel.MySelectedProjectId.HasValue)
        {
            await MatDialogService.AlertAsync(@Resource.MissingProject);
            return;
        }

        if (ViewModel.MyHours <= 0)
        {
            await MatDialogService.AlertAsync(@Resource.InvalidNumber);
            return;
        }

        IsLoading = true;
        var userId = ViewModel.UserId;
        var projectId = ViewModel.MySelectedProjectId.Value;
        var timeTracking = ViewModel.MyTrackingHourDate;
        var hours = ViewModel.MyHours;
        await TimeTrackingService.AddUserTimeTracking(userId, projectId, timeTracking, hours);
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");
    }
}
