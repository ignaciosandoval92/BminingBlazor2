@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using BminingBlazor.ViewModels.Projects

@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager
@inject IDummyProjectDataService DummyProjectDataService
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .load-hours-container {
        display: inline-grid;
        grid-template-rows: auto 1fr auto 1fr;
    }
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
    }
    .load-hours-item {
        display: inline;
    }


    .load-hours-label {
        font-size: 22px
    }
</style>

<div class="bmining-app">


    <h2 class="header-break">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>
    @if (projectsBelongsUserIdOrdinary.Count == 0)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {

        <button class="btn-plus float-right" @onclick="()=>AddTrackingHoursOrdinary(userId)">
        </button>
        <div class="alternate4-break"></div>
        <h6 class="header-break">@Resource.OrdinaryHours</h6>
        <div class="alternate2-break"></div>

        <table style="width:100%">
            <thead>
                <tr>
                    <th>@Resource.Project</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
            </thead>

            @foreach (var trackingHours in TrackingHoursItemOrdinary)
            {
                if (trackingHours.Count() < 6)
                {
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.ElementAt(0).MyTrackingHourDate = ViewModel.MyTrackingHourDate;
                    trackingHours.ElementAt(1).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(1);
                    trackingHours.ElementAt(2).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(2);
                    trackingHours.ElementAt(3).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(3);
                    trackingHours.ElementAt(4).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(4);
                    trackingHours.ElementAt(5).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(5);
                    trackingHours.ElementAt(6).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(6);
                }


                <tbody>
                    <tr>
                        <td style="min-width:350px">
                            <MatAutocompleteList Style="font-size:9pt" Items="@ViewModel?.OurAvailableProjects" TItem="ProjectResumeViewModel" FullWidth="true" CustomStringSelector="@(i => i?.MyProjectCode + " " + i?.MyProjectName)" Label="@Resource.Projects" @bind-Value="@trackingHours.ElementAt(0).SelectedProject" ShowClearButton="true">
                                <ItemTemplate>
                                    <div style="display: flex; flex-direction: row; min-width:100%;">
                                        <div style="flex:1;font-size:8pt">@context.MyProjectCode</div>
                                        <div style="flex:1;font-size:8pt">@context.MyProjectName</div>
                                    </div>
                                </ItemTemplate>
                            </MatAutocompleteList>
                        </td>

                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(0).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(1).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(2).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(3).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(4).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(5).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(6).MyHours" /> </td>
                        <td>
                            <button class="btn-delete" @onclick="() => DeleteTrackingHoursOrdinary(trackingHours)">
                            </button>

                        </td>

                    </tr>
                </tbody>


            }

        </table>
        <button class="btn-plus float-right" @onclick="()=>AddTrackingHoursExtraordinary(userId)">
        </button>
        <div class="alternate4-break"></div>
        <h6 class="header-break">@Resource.ExtraordinaryHours</h6>
        <div class="alternate2-break"></div>
        <table style="width:100%">
            <thead>
                <tr>
                    <th>@Resource.Project</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
            </thead>

            @foreach (var trackingHours in TrackingHoursItemExtraordinary)
            {
                if (trackingHours.Count() < 6)
                {
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.ElementAt(0).MyTrackingHourDate = ViewModel.MyTrackingHourDate;
                    trackingHours.ElementAt(1).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(1);
                    trackingHours.ElementAt(2).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(2);
                    trackingHours.ElementAt(3).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(3);
                    trackingHours.ElementAt(4).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(4);
                    trackingHours.ElementAt(5).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(5);
                    trackingHours.ElementAt(6).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(6);
                }


                <tbody>
                    <tr>
                        <td style="min-width:350px">
                            <MatAutocompleteList Style="font-size:9pt" Items="@ViewModel2?.OurAvailableProjects" TItem="ProjectResumeViewModel" FullWidth="true" CustomStringSelector="@(i => i?.MyProjectCode + " " + i?.MyProjectName)" Label="@Resource.Projects" @bind-Value="@trackingHours.ElementAt(0).SelectedProject" ShowClearButton="true">
                                <ItemTemplate>
                                    <div style="display: flex; flex-direction: row; min-width:100%;">
                                        <div style="flex:1;font-size:8pt">@context.MyProjectCode</div>
                                        <div style="flex:1;font-size:8pt">@context.MyProjectName</div>
                                    </div>
                                </ItemTemplate>
                            </MatAutocompleteList>
                        </td>

                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(0).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(1).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(2).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(3).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(4).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(5).MyHours" /> </td>
                        <td><input type="number" style="max-width:40px;" @bind="@trackingHours.ElementAt(6).MyHours" /> </td>
                        <td>
                            <button class="btn-delete" @onclick="() => DeleteTrackingHoursExtraordinary(trackingHours)">
                            </button>

                        </td>

                    </tr>
                </tbody>


            }

        </table>
        <button class="bmining-button" @onclick="() => Load(TrackingHoursItemOrdinary,TrackingHoursItemExtraordinary)">
            @Resource.Load
        </button>









    }


</div>



@code {
    [Parameter]
    public int Day { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }


    public bool IsLoading { get; set; }
    ProjectResumeViewModel value = null;
    public AddUserTimeTrackingViewModel ViewModel { get; set; }
    public AddUserTimeTrackingViewModel ViewModel2 { get; set; }
    public List<List<AddUserTimeTrackingViewModel>> TrackingHoursItemOrdinary = new List<List<AddUserTimeTrackingViewModel>>();
    public List<List<AddUserTimeTrackingViewModel>> TrackingHoursItemExtraordinary = new List<List<AddUserTimeTrackingViewModel>>();
    public int userId;
    public List<ProjectResumeViewModel> projectsBelongsUserIdOrdinary = new List<ProjectResumeViewModel>();
    public List<ProjectResumeViewModel> projectsBelongsUserIdExtraordinary = new List<ProjectResumeViewModel>();
    public List<ProjectResumeViewModel> values = new List<ProjectResumeViewModel>();
    public List<ProjectResumeViewModel> _projectOrdinary = new List<ProjectResumeViewModel>();
    public List<ProjectResumeViewModel> _projectExtraordinary = new List<ProjectResumeViewModel>();

    protected override async Task OnInitializedAsync()
    {


        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        projectsBelongsUserIdOrdinary = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);
        projectsBelongsUserIdExtraordinary.AddRange(projectsBelongsUserIdOrdinary);

        ViewModel = new AddUserTimeTrackingViewModel(userId)
        {
            MyTrackingHourDate = new DateTime(Year, Month, Day),
        };
        _projectOrdinary = await TimeTrackingService.ChargedProjectOrdinary(userId, ViewModel.MyTrackingHourDate, ViewModel.MyTrackingHourDate.AddDays(6));
        foreach (var project in _projectOrdinary)
        {
            var itemToRemove = projectsBelongsUserIdOrdinary.Single(r => r.MyProjectId == project.MyProjectId);
            this.projectsBelongsUserIdOrdinary.Remove(itemToRemove);
        }
        ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserIdOrdinary);

        ViewModel.MySelectedProjectId = projectsBelongsUserIdOrdinary.FirstOrDefault()?.MyProjectId;
        ViewModel2 = new AddUserTimeTrackingViewModel(userId)
        {
            MyTrackingHourDate = new DateTime(Year, Month, Day),
        };
        _projectExtraordinary = await TimeTrackingService.ChargedProjectExtraordinary(userId, ViewModel2.MyTrackingHourDate, ViewModel2.MyTrackingHourDate.AddDays(6));
        foreach (var project in _projectExtraordinary)
        {
            var itemToRemove = projectsBelongsUserIdExtraordinary.Single(r => r.MyProjectId == project.MyProjectId);
            this.projectsBelongsUserIdExtraordinary.Remove(itemToRemove);
        }
        ViewModel2.OurAvailableProjects.AddRange(projectsBelongsUserIdExtraordinary);

        ViewModel2.MySelectedProjectId = projectsBelongsUserIdExtraordinary.FirstOrDefault()?.MyProjectId;




    }

    private async Task Load(List<List<AddUserTimeTrackingViewModel>> trackingHoursItemOrdinary, List<List<AddUserTimeTrackingViewModel>> trackingHoursItemExtraordinary)
    {
        List<int> projectsChargedOrdinary = new List<int>();
        List<int> projectsChargedExtraordinary = new List<int>();
        if (trackingHoursItemOrdinary == null && trackingHoursItemExtraordinary==null)
        {
            await MatDialogService.AlertAsync(@Resource.MissingProject);
            return;
        }
        foreach(var i in trackingHoursItemOrdinary)
        {
            if(projectsChargedOrdinary.Contains(i.ElementAt(0).SelectedProject.MyProjectId))
            {
                await MatDialogService.AlertAsync(@Resource.DuplicateProject);
                return;
            }
            projectsChargedOrdinary.Add(i.ElementAt(0).SelectedProject.MyProjectId);
        }
        foreach (var i in trackingHoursItemExtraordinary)
        {
            if (projectsChargedExtraordinary.Contains(i.ElementAt(0).SelectedProject.MyProjectId))
            {
                await MatDialogService.AlertAsync(@Resource.DuplicateProject);
                return;
            }
            projectsChargedExtraordinary.Add(i.ElementAt(0).SelectedProject.MyProjectId);
        }

        projectsBelongsUserIdOrdinary.Clear();
        var userId = ViewModel.UserId;
        foreach (var week in trackingHoursItemOrdinary)
        {
            var projectId = week.ElementAt(0).SelectedProject.MyProjectId;
            foreach (var day in week)
            {
                var timeTracking = day.MyTrackingHourDate;
                var hours = day.MyHours;
                await TimeTrackingService.AddUserTimeTrackingOrdinary(userId, (int)projectId, timeTracking, hours);

            }

        }
        foreach (var week in trackingHoursItemExtraordinary)
        {
            var projectId = week.ElementAt(0).SelectedProject.MyProjectId;
            foreach (var day in week)
            {
                var timeTracking = day.MyTrackingHourDate;
                var hours = day.MyHours;
                await TimeTrackingService.AddUserTimeTrackingExtraordinary(userId, (int)projectId, timeTracking, hours);

            }

        }


        NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}", true);
    }
    private void AddTrackingHoursOrdinary(int userId)
    {
        TrackingHoursItemOrdinary.Add(new List<AddUserTimeTrackingViewModel>());
    }
    private void AddTrackingHoursExtraordinary(int userId)
    {
        TrackingHoursItemExtraordinary.Add(new List<AddUserTimeTrackingViewModel>());
    }
    private void DeleteTrackingHoursOrdinary(List<AddUserTimeTrackingViewModel> trackingHours)
    {
        TrackingHoursItemOrdinary.Remove(trackingHours);
    }
    private void DeleteTrackingHoursExtraordinary(List<AddUserTimeTrackingViewModel> trackingHours)
    {
        TrackingHoursItemExtraordinary.Remove(trackingHours);
    }

}
