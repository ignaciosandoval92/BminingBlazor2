@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{projectId1:int}/{level:int}/{select:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{projectId1:int}/{projectId2:int}/{level:int}/{select:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{projectId1:int}/{projectId2:int}/{projectId3:int}/{level:int}/{select:int}"
@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}/{projectId:int}/{projectId1:int}/{projectId2:int}/{projectId3:int}/{projectId4:int}/{level:int}/{select:int}"

@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using ViewModels.Projects

@inject IReportService ReportService
@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager
@inject IDummyProjectDataService DummyProjectDataService
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .load-hours-container {
        display: inline-grid;
        grid-template-rows: auto 1fr auto 1fr;
    }

    .load-hours-item {
        display: inline;
    }


    .load-hours-label {
        font-size: 22px
    }
</style>

<div class="bmining-app">

    <h2 class="header-break">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (ViewModel?.OurAvailableProjects != null)
    {
<div>
    <button class="btn-plus float-right" @onclick="()=>AddTrackingHours(userId)">
    </button>

    <table>
        <thead>
            <tr>
                <th>@Resource.Project</th>
                <th>Sab</th>
                <th>Dom</th>
                <th>Lun</th>
                <th>Mar</th>
                <th>Mie</th>
                <th>Jue</th>
                <th>Vie</th>
                <th>@Resource.Actions</th>
            </tr>
        </thead>
        <tbody>


            @foreach (var trackingHours in TrackingHoursItem)
            {
                if (trackingHours.Count() < 6)
                {
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                    trackingHours.ElementAt(0).MyTrackingHourDate = ViewModel.MyTrackingHourDate;
                    trackingHours.ElementAt(1).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(1);
                    trackingHours.ElementAt(2).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(2);
                    trackingHours.ElementAt(3).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(3);
                    trackingHours.ElementAt(4).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(4);
                    trackingHours.ElementAt(5).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(5);
                    trackingHours.ElementAt(6).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(6);
                }


                <tr>
                    <td>
                        <div class="form-group col-md-6">
                            <select style="min-width:200px;" class="form-control" @bind="@trackingHours.ElementAt(0).MySelectedProjectId" required>
                                @foreach (var project in projectsBelongsUserId)
                                {
                                    <option value="@project.MyProjectId">@project.MyProjectName</option>
                                }
                            </select>
                        </div>
                    </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(0).MyHours" /> </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(1).MyHours" /> </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(2).MyHours" /> </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(3).MyHours" /> </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(4).MyHours" /> </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(5).MyHours" /> </td>
                    <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(6).MyHours" /> </td>
                    <td>
                        <button class="btn-delete" @onclick="() => DeleteTrackingHours(trackingHours)">
                        </button>

                    </td>
                </tr>


            }

        </tbody>
    </table>
    <button class="bmining-button" @onclick="() => Load(TrackingHoursItem)">@Resource.Load
    </button>

    @*@if (Level == 1)
        {
            <h3 class="header-break">@NameProject1</h3>
        }
        @if (Level == 2)
        {
            <h3 class="header-break">@NameProject1/@NameProject2</h3>
        }
        @if (Level == 3)
        {
            <h3 class="header-break">@NameProject1/@NameProject2/@NameProject3</h3>
        }
        @if (Level == 4)
        {
            <h3 class="header-break">@NameProject1/@NameProject2/@NameProject3/@NameProject4</h3>
        }

        @if (!IsLoading)
        {

            @if (Select == 1 || Level == 4 || projectSons.Count == 0)
            {<EditForm Model="@ViewModel" OnValidSubmit="SubmitCallback">
                    <div class="form-group">
                        <label for="inputHours" class="load-hours-label">@Resource.InvestedHours</label>
                        <input type="number" @bind="@ViewModel.MyHours" step="0.01" class="form-control" id="inputHours" placeholder="@Resource.InvestedHours">
                    </div>
                    <div class="w-100">
                        <button type="submit" class="bmining-button float-right">@Resource.Load</button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="form-group">

                    <MatAutocompleteList Items="@ViewModel?.OurAvailableProjects" TItem="ProjectResumeViewModel" FullWidth="true" CustomStringSelector="@(i => i?.MyProjectCode + " " + i?.MyProjectName)" Label="@Resource.Projects" @bind-Value="@value" ShowClearButton="true">
                        <ItemTemplate>
                            <div style="display: flex; flex-direction: row; width: 100%;">
                                <div style="flex:1;">@context.MyProjectCode</div>
                                <div style="flex:1;">@context.MyProjectName</div>
                            </div>
                        </ItemTemplate>
                    </MatAutocompleteList>
                    <span>
                        @if ((value?.MyProjectId) > 0)
                        {
                            ExistingSons(value.MyProjectId);
                            if (sons > 0 && Level == 0)
                            {
                                <button class="bmining-button float-right" @onclick="() => SelectSon(value.MyProjectId)">@Resource.SelectSubProject</button>
                                <button class="bmining-button float-right" @onclick="() => SelectProject(value.MyProjectId)">@Resource.SelectCurrentProject</button>

                            }

                            else
                            {
                                <EditForm Model="@ViewModel" OnValidSubmit="SubmitCallback">
                                    <div class="form-group">
                                        <label for="inputHours" class="load-hours-label">@Resource.InvestedHours</label>
                                        <input type="number" @bind="@ViewModel.MyHours" step="0.01" class="form-control" id="inputHours" placeholder="@Resource.InvestedHours">
                                    </div>
                                    <div class="w-100">
                                        <button type="submit" class="bmining-button float-right">@Resource.Load</button>
                                    </div>
                                </EditForm>

                            }
                        }
                    </span>



                </div>



             }


        }
        else
        {
            <MatProgressBar Indeterminate="true"></MatProgressBar>
        }*@

</div>
    }
</div>

@code {
        [Parameter]
        public int Day { get; set; }
        [Parameter]
        public int Month { get; set; }
        [Parameter]
        public int Year { get; set; }
        [Parameter]
        public int Level { get; set; }
        [Parameter]
        public int ProjectId { get; set; }
        [Parameter]
        public int ProjectId1 { get; set; }
        [Parameter]
        public int ProjectId2 { get; set; }
        [Parameter]
        public int ProjectId3 { get; set; }
        [Parameter]
        public int ProjectId4 { get; set; }
        [Parameter]
        public int Select { get; set; }




    public string NameProject1 { get; set; }
    public string NameProject2 { get; set; }
    public string NameProject3 { get; set; }
    public string NameProject4 { get; set; }
    public bool IsLoading { get; set; }
    public List<ProjectViewModel> projectSons = new List<ProjectViewModel>();
    public AddUserTimeTrackingViewModel ViewModel { get; set; }
    public List<List<AddUserTimeTrackingViewModel>> TrackingHoursItem;
    ProjectResumeViewModel value = null;
    public List<ProjectResumeViewModel> projectsBelongsUserId;
    public int sons;
    public int userId;
    public int IdProject;


    protected override async Task OnInitializedAsync()
    {
        var email = AuthenticationStateProvider.GetEmail();
        userId = await UserDataService.GetUserId(await email);
        TrackingHoursItem = new List<List<AddUserTimeTrackingViewModel>>();
        projectsBelongsUserId = await ReportService.GetProjectFatherWhereBelongsUserId(userId);
        if (Level == 0)
        {
            projectSons = await ProjectDataService.ReadSonsProject(ProjectId);
            //var projectsBelongsUserId = await ReportService.GetProjectFatherWhereBelongsUserId(userId);
            ViewModel = new AddUserTimeTrackingViewModel(userId)
            {
                MyTrackingHourDate = new DateTime(Year, Month, Day),
            };
            ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
            ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
        }
        else
        {
            var projectUser = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);
            var code = await ProjectDataService.ReadProject(ProjectId);
            projectSons = await ProjectDataService.ReadTreeProject(code.MyProjectCode);
            //var projectsBelongsUserId = new List<ProjectResumeViewModel>();
            foreach (var pro in projectSons)
            {
                var project = new ProjectResumeViewModel()
                {
                    MyProjectCode = pro.MyProjectCode,
                    MyProjectId = pro.MyId,
                    MyProjectName = pro.MyProjectName
                };
                if (projectUser.Exists(x => x.MyProjectId == project.MyProjectId))
                {
                    projectsBelongsUserId.Add(project);
                }
            }

            ViewModel = new AddUserTimeTrackingViewModel(userId)
            {
                MyTrackingHourDate = new DateTime(Year, Month, Day),
            };
            ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
            ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
            if (Level == 1)
            {
                NameProject1 = (await ProjectDataService.ReadProject(ProjectId1)).MyProjectName;
            }
            if (Level == 2)
            {
                NameProject1 = (await ProjectDataService.ReadProject(ProjectId1)).MyProjectName;
                NameProject2 = (await ProjectDataService.ReadProject(ProjectId2)).MyProjectName;
            }
            if (Level == 3)
            {
                NameProject1 = (await ProjectDataService.ReadProject(ProjectId1)).MyProjectName;
                NameProject2 = (await ProjectDataService.ReadProject(ProjectId2)).MyProjectName;
                NameProject3 = (await ProjectDataService.ReadProject(ProjectId3)).MyProjectName;
            }
            if (Level == 4)
            {
                NameProject1 = (await ProjectDataService.ReadProject(ProjectId1)).MyProjectName;
                NameProject2 = (await ProjectDataService.ReadProject(ProjectId2)).MyProjectName;
                NameProject3 = (await ProjectDataService.ReadProject(ProjectId3)).MyProjectName;
                NameProject4 = (await ProjectDataService.ReadProject(ProjectId4)).MyProjectName;
            }
        }
    }

    private async Task SubmitCallback()
    {
        if (ProjectId < 0)
        {
            await MatDialogService.AlertAsync(@Resource.MissingProject);
            return;
        }

        if (ViewModel.MyHours <= 0)
        {
            await MatDialogService.AlertAsync(@Resource.InvalidNumber);
            return;
        }
        if (value.MyProjectId > 0)
        {
            IsLoading = true;
            var userId = ViewModel.UserId;
            var timeTracking = ViewModel.MyTrackingHourDate;
            var hours = ViewModel.MyHours;
            await TimeTrackingService.AddUserTimeTracking(userId, value.MyProjectId, timeTracking, hours);
            NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");
        }
        else
        {
            IsLoading = true;
            var userId = ViewModel.UserId;
            var timeTracking = ViewModel.MyTrackingHourDate;
            var hours = ViewModel.MyHours;
            await TimeTrackingService.AddUserTimeTracking(userId, ProjectId, timeTracking, hours);
            NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");
        }
    }
    public async Task SelectSon(int? projectId)
    {
        if (Level == 1)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{ProjectId1}/{pro.MyId}/{2}/{0}", true);
        }
        else if (Level == 2)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{ProjectId1}/{ProjectId2}/{pro.MyId}/{3}/{0}", true);
        }
        else if (Level == 3)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{ProjectId1}/{ProjectId2}/{ProjectId3}/{pro.MyId}/{4}/{0}", true);
        }
        else
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{pro.MyId}/{1}/{0}", true);
        }

    }
    public async Task SelectProject(int? projectId)
    {

        if (Level == 1)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{ProjectId1}/{pro.MyId}/{2}/{1}", true);
        }
        else if (Level == 2)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{ProjectId1}/{ProjectId2}/{pro.MyId}/{3}/{1}", true);
        }
        else if (Level == 3)
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{ProjectId1}/{ProjectId2}/{ProjectId3}/{pro.MyId}/{4}/{1}", true);
        }
        else
        {
            var proId = projectId ?? default(int);
            var pro = await ProjectDataService.ReadProject(proId);
            NavigationManager.NavigateTo($"/addusertrackinghour/{Day}/{Month}/{Year}/{proId}/{pro.MyId}/{1}/{1}", true);
        }
    }
    public async Task ExistingSons(int id)
    {
        var a = await ProjectDataService.ReadSonsProject(id);
        sons = a.Count();

    }
    private void AddTrackingHours(int userId)
    {
        TrackingHoursItem.Add(new List<AddUserTimeTrackingViewModel>());
    }
    private void DeleteTrackingHours(List<AddUserTimeTrackingViewModel> trackingHours)
    {
        TrackingHoursItem.Remove(trackingHours);
    }
    private async Task Load(List<List<AddUserTimeTrackingViewModel>> trackedWeek)
    {
        foreach (var week in trackedWeek)
        {
            foreach (var Hours in week)
            {
                IsLoading = true;
                var timeTracking = Hours.MyTrackingHourDate;
                var hours = Hours.MyHours;
                var userId = Hours.UserId;
                var projectId = week.ElementAt(0).MySelectedProjectId??default(int);
                await TimeTrackingService.AddUserTimeTracking(userId,projectId , timeTracking, hours);


            }
        }
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");

    }
}
