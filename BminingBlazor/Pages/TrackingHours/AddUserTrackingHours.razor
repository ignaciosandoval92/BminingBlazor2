@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http

@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager
@inject IDummyProjectDataService DummyProjectDataService
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .load-hours-container {
        display: inline-grid;
        grid-template-rows: auto 1fr auto 1fr;
    }

    .load-hours-item {
        display: inline;
    }


    .load-hours-label {
        font-size: 22px
    }
</style>

<div class="bmining-app">

    <h2 class="header-break">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (!IsLoading)
    {
        <EditForm Model="@ViewModel" OnValidSubmit="SubmitCallback">
            <div class="form-group">
                <label for="inputHours" class="load-hours-label">@Resource.InvestedHours</label>
                <input type="number" @bind="@ViewModel.MyHours" step="0.1" class="form-control" id="inputHours" placeholder="@Resource.InvestedHours">
            </div>
            <div class="form-group">
                <label for="inputProject" class="load-hours-label">@Resource.Project</label>
                <select @bind="@ViewModel.MySelectedProjectId" class="form-control" id="inputProject">

                    @foreach (var projectDetailsViewModel in ViewModel?.OurAvailableProjects)
                    {
                        <option value="@projectDetailsViewModel.MyProjectId">
                            @projectDetailsViewModel.MyProjectCode - @projectDetailsViewModel.MyProjectName
                        </option>
                    }
                </select>
            </div>
            <div class="w-100">
                <button type="submit" class="badge badge-primary badge-pill  bg-bmining-info float-right float-right">@Resource.Load</button>
            </div>
        </EditForm>
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
</div>

@code {
    [Parameter]
    public int Day { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }


    public bool IsLoading { get; set; }

    public AddUserTimeTrackingViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        var projectsBelongsUserId = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);

        ViewModel = new AddUserTimeTrackingViewModel(userId)
        {
            MyTrackingHourDate = new DateTime(Year, Month, Day),
        };
        ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
        ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
    }

    private async Task SubmitCallback()
    {
        if (!ViewModel.MySelectedProjectId.HasValue)
        {
            await MatDialogService.AlertAsync(@Resource.MissingProject);
            return;
        }

        if (ViewModel.MyHours <= 0)
        {
            await MatDialogService.AlertAsync(@Resource.InvalidNumber);
            return;
        }

        IsLoading = true;
        var userId = ViewModel.UserId;
        var projectId = ViewModel.MySelectedProjectId.Value;
        var timeTracking = ViewModel.MyTrackingHourDate;
        var hours = ViewModel.MyHours;
        await TimeTrackingService.AddUserTimeTracking(userId, projectId, timeTracking, hours);
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");
    }
}
