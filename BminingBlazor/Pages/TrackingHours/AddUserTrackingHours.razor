@page "/addusertrackinghour/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using BminingBlazor.ViewModels.Projects

@inject IUserDataService UserDataService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject NavigationManager NavigationManager
@inject IDummyProjectDataService DummyProjectDataService
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .load-hours-container {
        display: inline-grid;
        grid-template-rows: auto 1fr auto 1fr;
    }

    .load-hours-item {
        display: inline;
    }


    .load-hours-label {
        font-size: 22px
    }
</style>

<div class="bmining-app">


    <h2 class="header-break">@Resource.LoadHours @ViewModel.MyTrackingHourDate.ToShortDateString()</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>
    @if(IsLoading)
    {
    <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
    <div>
        <button class="btn-plus float-right" @onclick="()=>AddTrackingHours(userId)">
        </button>

        <table>
            <thead>
                <tr>
                    <th>@Resource.Project</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
            </thead>
            <tbody>


                @foreach (var trackingHours in TrackingHoursItem)
                {
                    if (trackingHours.Count() < 6)
                    {
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.Add(new AddUserTimeTrackingViewModel(userId));
                        trackingHours.ElementAt(0).MyTrackingHourDate = ViewModel.MyTrackingHourDate;
                        trackingHours.ElementAt(1).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(1);
                        trackingHours.ElementAt(2).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(2);
                        trackingHours.ElementAt(3).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(3);
                        trackingHours.ElementAt(4).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(4);
                        trackingHours.ElementAt(5).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(5);
                        trackingHours.ElementAt(6).MyTrackingHourDate = ViewModel.MyTrackingHourDate.AddDays(6);
                    }


                    <tr>
                        <td>
                            <div class="form-group col-md-6">
                                <select style="min-width:200px;" class="form-control" @bind="@trackingHours.ElementAt(0).MySelectedProjectId" required>
                                    @foreach (var project in projectsBelongsUserId)
                                    {
                                        <option value="@project.MyProjectId">@project.MyProjectName</option>
                                    }
                                </select>
                            </div>
                        </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(0).MyHours" /> </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(1).MyHours" /> </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(2).MyHours" /> </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(3).MyHours" /> </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(4).MyHours" /> </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(5).MyHours" /> </td>
                        <td><input style="max-width:40px;" @bind="@trackingHours.ElementAt(6).MyHours" /> </td>
                        <td>
                            <button class="btn-delete" @onclick="() => DeleteTrackingHours(trackingHours)">
                            </button>

                        </td>
                    </tr>


                }

            </tbody>
        </table>
        <button class="bmining-button" @onclick="() => Load(TrackingHoursItem)">
            @Resource.Load
        </button>







    </div>
    }

</div>



@code {
    [Parameter]
    public int Day { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }


    public bool IsLoading { get; set; }
    ProjectResumeViewModel value = null;
    public AddUserTimeTrackingViewModel ViewModel { get; set; }
    public List<List<AddUserTimeTrackingViewModel>> TrackingHoursItem = new List<List<AddUserTimeTrackingViewModel>>();
    public int userId;
    public List<ProjectResumeViewModel> projectsBelongsUserId = new List<ProjectResumeViewModel>();


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        projectsBelongsUserId = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);

        ViewModel = new AddUserTimeTrackingViewModel(userId)
        {
            MyTrackingHourDate = new DateTime(Year, Month, Day),
        };
        ViewModel.OurAvailableProjects.AddRange(projectsBelongsUserId);
        ViewModel.MySelectedProjectId = projectsBelongsUserId.FirstOrDefault()?.MyProjectId;
        IsLoading = false;
    }

    private async Task Load(List<List<AddUserTimeTrackingViewModel>> trackingHoursItem)
    {

        if (trackingHoursItem == null)
        {
            await MatDialogService.AlertAsync(@Resource.MissingProject);
            return;
        }


        IsLoading = true;
        var userId = ViewModel.UserId;
        foreach (var week in trackingHoursItem)
        {
            var projectId = week.ElementAt(0).MySelectedProjectId;
            foreach (var day in week)
            {
                var timeTracking = day.MyTrackingHourDate;
                var hours = day.MyHours;
                await TimeTrackingService.AddUserTimeTracking(userId, (int)projectId, timeTracking, hours);

            }

        }


        NavigationManager.NavigateTo($"/dashboard_tracking_hours/{Day}/{Month}/{Year}");
    }
    private void AddTrackingHours(int userId)
    {
        TrackingHoursItem.Add(new List<AddUserTimeTrackingViewModel>());
    }
    private void DeleteTrackingHours(List<AddUserTimeTrackingViewModel> trackingHours)
    {
        TrackingHoursItem.Remove(trackingHours);
    }
}
