@page "/dashboard_tracking_hours"
@page "/dashboard_tracking_hours/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using Models.TimeTracking
@using System.Globalization
@using Humanizer
@using BminingBlazor.Pages.TrackingHours
@using BminingBlazor.ViewModels.Projects
@using SendGrid;
@using SendGrid.Helpers.Mail;
@using System.Net.Mail;
@using System.Net;

@inject ITimeTrackingService TimeTrackingService
@inject IMatToaster MatToaster
@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    .week-header-container {
        display: inline-grid;
        grid-template-columns: auto auto auto 1fr;
        grid-column-gap: 4px;
        align-items: center
    }

    .week-header-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
    }

    .calendar {
        font-size: 12pt;
    }

    .week-header-bmining-button {
        font-size: 30px;
        font-weight: bold;
        padding: 0px 18px;
    }


    .item-dashboard-container {
        display: inline-grid;
        grid-template-columns: auto 1fr auto;
        grid-column-gap: 0px;
        align-items: center
    }

    .item-dashboard-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
        padding: 5px;
    }

    .item-dashboard-item2 {
        position: absolute;
        vertical-align: middle;
        display: inline;
        padding: 5px;
        right: 50px
    }

    .item-dashboard-border {
        margin: 5px;
        border-style: solid;
        border-radius: 4px;
        border-width: 2.5px;
    }

    .header-break {
        margin: 0px 0px 0px 16px
    }

    .line-container {
        width: 200px;
        height: 20px;
    }

    .single-line {
        width: 100%;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: pre;
    }
</style>
<div class="logo" />
<div class="line-logo" />
<div class="bmining-app">
    <h2 class="header-break">@Resource.DashboardHours</h2>

    <div class="main-break">
        <div class="main-circle"></div>
    </div>
    @if (IsLoading)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <div class="week-header-container">


            <div class="week-header-item">
                <h6 class="m-2 txt">@Resource.Week <h4 class="bmining-button h4 txt"> @NumberWeek()</h4>@MyStartOfWeek.ToString("d MMMM yyyy")</h6>
            </div>



            <div class="week-header-item">

                <button class="btn-back" @onclick="@PreviousWeek">
                </button>

            </div>


            <div class="calendar">
                <MatDatePicker @bind-Value="@MySelectedDate" />
            </div>
            <div class="week-header-item">
                <button class="btn-next" @onclick="@NextWeek">
                </button>
            </div>

        </div>





        <div class="alternate1-break"></div>

        <h5 class="header-break">@Resource.OrdinaryHours</h5>
        <div class="alternate2-break"></div>

        <table>
            <thead>
                <tr>
                    <th>@Resource.Project</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var proord in _projectsOrdinary)
                {
                    <tr>
                        <td>@proord.MyProjectCode<br /><txt>@proord.MyProjectName</txt></td>
                        <td>@proord.TrackedHoursSat</td>
                        <td>@proord.TrackedHoursSun</td>
                        <td>@proord.TrackedHoursMon</td>
                        <td>@proord.TrackedHoursTue</td>
                        <td>@proord.TrackedHoursWed</td>
                        <td>@proord.TrackedHoursThu</td>
                        <td>@proord.TrackedHoursFri</td>
                        <td>
                            @if (proord.SendHours == 1)
                            {
                                if (proord.MyStatusHours == 0)
                                {
                                    <p class="waiting-approved" />
                                }
                                else
                                {
                                    <p class="approved" />
                                }

                            }
                            @if (proord.SendHours == 0)
                            {
                                if (proord.MyStatusHours == 2)
                                {
                                    <p class="not-approved align-bottom float-left" />
                                }
                                <button class="btn-delete align-bottom " @onclick="() => RemoveItem(proord.MyProjectId, 0)"></button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <h5 class="header-break">@Resource.ExtraordinaryHours</h5>
        <div class="alternate2-break"></div>

        <table>
            <thead>
                <tr>
                    <th>@Resource.Project</th>
                    <th>Sab</th>
                    <th>Dom</th>
                    <th>Lun</th>
                    <th>Mar</th>
                    <th>Mie</th>
                    <th>Jue</th>
                    <th>Vie</th>
                    <th>@Resource.Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var proext in _projectsExtraordinary)
                {
                    <tr>
                        <td>@proext.MyProjectCode<br /><txt>@proext.MyProjectName</txt></td>
                        <td>@proext.TrackedHoursSat</td>
                        <td>@proext.TrackedHoursSun</td>
                        <td>@proext.TrackedHoursMon</td>
                        <td>@proext.TrackedHoursTue</td>
                        <td>@proext.TrackedHoursWed</td>
                        <td>@proext.TrackedHoursThu</td>
                        <td>@proext.TrackedHoursFri</td>
                        <td>
                            @if (proext.SendHours == 1)
                            {
                                if (proext.MyStatusHours == 0)
                                {
                                    <p class="waiting-approved" />
                                }
                                else
                                {
                                    <p class="approved" />
                                }

                            }
                            @if (proext.SendHours == 0)
                            {
                                if (proext.MyStatusHours == 2)
                                {
                                    <p class="not-approved align-bottom float-left" />
                                }
                                <button class="btn-delete align-bottom " @onclick="() => RemoveItem(proext.MyProjectId, 0)"></button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        if (differenceInDays < 21 && differenceInDays >= 0)
        {
            <button @onclick="() => AddItem(MyStartOfWeek)" class="bmining-button ">@Resource.Load</button>
            <button @onclick="EditHours" class="bmining-button">@Resource.Edit</button>
            <button @onclick="()=>SendHours(_projectsOrdinary,_projectsExtraordinary)" class="bmining-button">@Resource.Send</button>
            <button @onclick="CopyLastWeek" class="bmining-button">@Resource.CopyLastWeek</button>
        }
    }

</div>



@code {
    [Parameter]
    public int? Day { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Year { get; set; }

    public bool IsLoading { get; set; }
    public string Email { get; set; }
    public DashboardUserTrackingViewModel DashboardUserTracking { get; set; }
    public List<int> _projects = new List<int>();
    public List<int> idsProjects1 = new List<int>();
    public ProjectTrackingWeekViewModel _projectOrdinary = new ProjectTrackingWeekViewModel();
    public List<ProjectTrackingWeekViewModel> _projectsOrdinary = new List<ProjectTrackingWeekViewModel>();
    public ProjectTrackingWeekViewModel _projectExtraordinary = new ProjectTrackingWeekViewModel();
    public List<ProjectTrackingWeekViewModel> _projectsExtraordinary = new List<ProjectTrackingWeekViewModel>();
    public int userId;
    public int differenceInDays;

    private DateTime _mySelectedDate;
    public DateTime MySelectedDate
    {
        get { return _mySelectedDate; }
        set
        {
            _mySelectedDate = value;
            var dayOfWeek = value.DayOfWeek;
            int numberOfDay;
            switch (dayOfWeek)
            {
                case DayOfWeek.Saturday:
                    numberOfDay = 0;
                    break;
                case DayOfWeek.Sunday:
                    numberOfDay = 1;
                    break;
                case DayOfWeek.Monday:
                    numberOfDay = 2;
                    break;
                case DayOfWeek.Tuesday:
                    numberOfDay = 3;
                    break;
                case DayOfWeek.Wednesday:
                    numberOfDay = 4;
                    break;
                case DayOfWeek.Thursday:
                    numberOfDay = 5;
                    break;
                case DayOfWeek.Friday:
                    numberOfDay = 6;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            MyStartOfWeek = MySelectedDate.AddDays(-numberOfDay);
            MyComparativeWeek = DateTime.UtcNow.AddDays(-numberOfDay);
            TimeSpan ts = MyComparativeWeek - MyStartOfWeek;
            differenceInDays = ts.Days;
            this.StateHasChanged();
            SetDate(MyStartOfWeek).Wait();
            IsLoading = true;
        }
    }

    public DateTime MyStartOfWeek { get; set; }
    public DateTime MyComparativeWeek { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        MySelectedDate = DateTime.UtcNow;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var email = await AuthenticationStateProvider.GetEmail();
            userId = await UserDataService.GetUserId(email);

            if (!Day.HasValue || !Month.HasValue || !Year.HasValue)
            {
                var date = DateTime.UtcNow.ToLocalTime();
                MySelectedDate = new DateTime(date.Year, date.Month, date.Day);
            }
            else MySelectedDate = new DateTime(Year.Value, Month.Value, Day.Value);
            IsLoading = false;
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SetDate(DateTime fromTime)
    {

        _projectsExtraordinary.Clear();
        _projectsOrdinary.Clear();
        var chargedProjectsOrdinary = await TimeTrackingService.ChargedProjectOrdinary(userId, MyStartOfWeek, MyStartOfWeek.AddDays(6));
        foreach (var i in chargedProjectsOrdinary)
        {
            _projectOrdinary = await TimeTrackingService.ReadProjectWeekOrdinary(i.MyProjectId, userId, MyStartOfWeek, MyStartOfWeek.AddDays(6));
            _projectsOrdinary.Add(_projectOrdinary);
        }
        var chargedProjectsExtraordinary = await TimeTrackingService.ChargedProjectExtraordinary(userId, MyStartOfWeek, MyStartOfWeek.AddDays(6));
        foreach (var i in chargedProjectsExtraordinary)
        {
            _projectExtraordinary = await TimeTrackingService.ReadProjectWeekExtraordinary(i.MyProjectId, userId, MyStartOfWeek, MyStartOfWeek.AddDays(6));
            _projectsExtraordinary.Add(_projectExtraordinary);
        }
        this.StateHasChanged();
    }

    private void AddItem(DateTime date)
    {
        IsLoading = true;
        NavigationManager.NavigateTo($"/addusertrackinghour/{date.Day}/{date.Month}/{date.Year}", true);
    }

    private async Task RemoveItem(int idProject, int typeHours)
    {
        IsLoading = true;
        var status = await MatDialogService.ConfirmAsync(Resource.AreYouSureToDelete);
        if (!status)
        {
            NavigationManager.NavigateTo($"/dashboard_tracking_hours", true);
        }
        else
        {
            await TimeTrackingService.RemoveWeekTrackingHoursFromProject(idProject, userId, MyStartOfWeek.AddDays(-1), MyStartOfWeek.AddDays(6), typeHours);
            NavigationManager.NavigateTo($"/dashboard_tracking_hours", true);
        }

    }

    private void EditHours()
    {       
        NavigationManager.NavigateTo($"/EditHours/{userId}/{MyStartOfWeek.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{MyStartOfWeek.AddDays(6).ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}", true);

    }

    private void NextWeek()
    {
        IsLoading = true;
        MySelectedDate = MySelectedDate.AddDays(7);
        IsLoading = false;

    }

    private void PreviousWeek()
    {
        IsLoading = true;
        MySelectedDate = MySelectedDate.AddDays(-7);
        IsLoading = false;

    }

    private async void CopyLastWeek()
    {
        IsLoading = true;
        await Task.Delay(500);
        var lastWeek = await TimeTrackingService.GetUserTrackingModels(userId, MyStartOfWeek.AddDays(-7), MyStartOfWeek);
        foreach (var hoursLastWeek in lastWeek)
        {
            var projectId = hoursLastWeek.MyProjectId;
            var hours = hoursLastWeek.MyTrackedHours;
            var timeTracking = hoursLastWeek.MyTimeTrackingDate.AddDays(+7);
            await TimeTrackingService.AddUserTimeTrackingOrdinary(userId, projectId, timeTracking, hours);
        }
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/", true);
    }

    private int NumberWeek()
    {
        int numberWeek = System.Globalization.CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(MySelectedDate, System.Globalization.CalendarWeekRule.FirstDay, MySelectedDate.DayOfWeek);
        return numberWeek;
    }
    public async Task SendHours(List<ProjectTrackingWeekViewModel> projectsordinary, List<ProjectTrackingWeekViewModel> projectsextraordinary)
    {
        double TotalHours;
        double HoursMon = 0;
        double HoursTue = 0;
        double HoursWed = 0;
        double HoursThu = 0;
        double HoursFri = 0;

        foreach (var pro in projectsordinary)
        {
            HoursMon = pro.TrackedHoursMon + HoursMon;
            HoursTue = pro.TrackedHoursTue + HoursTue;
            HoursWed = pro.TrackedHoursWed + HoursWed;
            HoursThu = pro.TrackedHoursThu + HoursThu;
            HoursFri = pro.TrackedHoursFri + HoursFri;
        }
        TotalHours = HoursMon + HoursTue + HoursWed + HoursThu + HoursFri;

        if (HoursMon < 9 || HoursTue < 9 || HoursWed < 9 || HoursThu < 9 || HoursFri < 5 || TotalHours > 41.5)
        {
            await MatDialogService.AlertAsync(@Resource.WrongNumberOfHours);
            return;
        }
        IsLoading = true;
        await Task.Delay(500);
        foreach (var pro in projectsordinary)
        {
            if (pro.SendHours == 0)
            {
                await TimeTrackingService.SendTrackedHours(pro.IdSat);
                await TimeTrackingService.SendTrackedHours(pro.IdSun);
                await TimeTrackingService.SendTrackedHours(pro.IdMon);
                await TimeTrackingService.SendTrackedHours(pro.IdTue);
                await TimeTrackingService.SendTrackedHours(pro.IdWed);
                await TimeTrackingService.SendTrackedHours(pro.IdThu);
                await TimeTrackingService.SendTrackedHours(pro.IdFri);
            }
        }
        foreach (var pro in projectsextraordinary)
        {
            if (pro.SendHours == 0)
            {
                await TimeTrackingService.SendTrackedHours(pro.IdSat);
                await TimeTrackingService.SendTrackedHours(pro.IdSun);
                await TimeTrackingService.SendTrackedHours(pro.IdMon);
                await TimeTrackingService.SendTrackedHours(pro.IdTue);
                await TimeTrackingService.SendTrackedHours(pro.IdWed);
                await TimeTrackingService.SendTrackedHours(pro.IdThu);
                await TimeTrackingService.SendTrackedHours(pro.IdFri);
            }
        }
        NavigationManager.NavigateTo("/dashboard_tracking_hours", true);
    }


}
