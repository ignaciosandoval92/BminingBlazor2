@page "/dashboard_tracking_hours"
@page "/dashboard_tracking_hours/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using Models.TimeTracking
@using System.Globalization
@using Humanizer
@using ViewModels.Projects
@using BminingBlazor.Pages.TrackingHours

@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject IMatToaster MatToaster
@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    .week-header-container {
        display: inline-grid;
        grid-template-columns: auto auto auto 1fr;
        grid-column-gap: 4px;
        align-items: center;
    }

    .week-header-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
    }

    .calendar {
        font-size: 12pt;
    }

    .week-header-bmining-button {
        font-size: 30px;
        font-weight: bold;
        padding: 0px 18px;
    }


    .item-dashboard-container {
        display: inline-grid;
        grid-template-columns: auto 1fr auto;
        grid-column-gap: 0px;
        align-items: center
    }

    .item-dashboard-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
        padding: 5px
    }

    .item-dashboard-item2 {
        position: absolute;
        vertical-align: middle;
        display: inline;
        padding: 5px;
        right: 50px
    }

    .item-dashboard-border {
        margin: 5px;
        border-style: solid;
        border-radius: 4px;
        border-width: 2.5px;
    }

    .header-break {
        margin: 0px 0px 0px 16px
    }

    .line-container {
        width: 200px;
        height: 20px;
    }

    .single-line {
        width: 100%;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: pre;
    }
</style>
<div class="logo" />
<div class="line-logo" />
<div class="bmining-app">

    @if (IsLoading)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <h2 class="header-break">@Resource.DashboardHours</h2>

        <div class="main-break">
            <div class="main-circle"></div>
        </div>
        <div class="week-header-container">


            <div class="week-header-item d-inline-block">
                <h4 class="m-2 txt">@Resource.Week <h4 class="bmining-button h4 txt"> @NumberWeek()</h4>&nbsp;@MyStartOfWeek.ToString("d MMMM yyyy")</h4>
            </div>


            <div class="week-header-item ">

                <button class="btn-back" @onclick="@PreviousWeek">
                </button>

            </div>


            <div class="calendar ">
                <MatDatePicker @bind-Value="@MySelectedDate" />&nbsp;&nbsp;&nbsp
            </div>

            <div class="week-header-item">
                <button class="btn-next" @onclick="@NextWeek">
                </button>
            </div>



        </div>


        <div class="alternate1-break"></div>

        <table>
            <thead>
            <th>@Resource.Project</th>
            <th>Sab</th>
            <th>Dom</th>
            <th>Lun</th>
            <th>Mar</th>
            <th>Mie</th>
            <th>Jue</th>
            <th>Vie</th>
            </thead>
            @foreach (var i in ListHours)
            {
                <tbody>
                <tr>

                    


                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyProjectId == i.MyProjectId)
                            {

                                @hours.MyProjectName
                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == DateTime.Today)
                            {
                                @hours.MyTrackedHours

                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == DateTime.Today.AddDays(1))
                            {
                                @hours.MyTrackedHours

                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == DateTime.Today.AddDays(2))
                            {
                                @hours.MyTrackedHours

                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == DateTime.Today.AddDays(3))
                            {
                                @hours.MyTrackedHours


                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == DateTime.Today.AddDays(4))
                            {
                                @hours.MyTrackedHours

                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == MyStartOfWeek.AddDays(5))
                            {
                                @hours.MyTrackedHours

                                }
                            }
                        </td>
                    <td>
                        @foreach (var hours in ListHours)
                        {
                            @if (hours.MyTimeTrackingDate == MyStartOfWeek.AddDays(6))
                            {
                                @hours.MyTrackedHours

                                }
                            }
                        </td>
                
                    </tr>
                    </tbody>
                }
        </table>

        @*<div class="w-100">
                @if (DashboardUserTracking != null)
                {
                    @foreach (var weekDayUserTrackingHours in DashboardUserTracking.WeekDayUserTrackingHours)
                    {
                        TotalHours = 0;
                        <div class="col">
                            <div class="d-flex flex-row w-100 justify-content-between">
                                <div>
                                    <div class="d-inline-block">
                                        <h4 class="font-weight-bold">@weekDayUserTrackingHours.ItemTime.ToString("dddd").Pascalize().Substring(0, 3)</h4>
                                    </div>
                                </div>

                                @foreach (var day in weekDayUserTrackingHours.OurWeekDayUserTrackingHourItems)
                                {
                                    TotalHours = TotalHours + day.MyTrackedHours;
                                }

                                <div>
                                    <div class="item-dashboard-item2">
                                        <span class="badge badge-primary badge-pill m-1 bg-bmining-@TotalHoursStatus(TotalHours,weekDayUserTrackingHours.ItemTime.ToString("dddd").Pascalize())">
                                            <h10>@Resource.Hours : @(Math.Truncate(TotalHours*100)/100)</h10>
                                        </span>
                                    </div>


                                </div>

                                <div class="d-inline-block">

                                    <button @onclick="() => AddItem(weekDayUserTrackingHours)" class="btn-plus ">
                                    </button>
                                </div>

                            </div>



                            <div class="list-group">
                                @foreach (var dayUserTrackingHourItem in weekDayUserTrackingHours.OurWeekDayUserTrackingHourItems)
                                {
                                    <div class="item-dashboard-container item-dashboard-border @dayUserTrackingHourItem.MyTrackingStatusClass">

                                        @foreach (var dad in Fathers)
                                        {
                                            if (dad.MyProjectCode == dayUserTrackingHourItem.MyProjectCode)
                                            {

                                                <h6 class="item-dashboard-item">
                                                    @dad.MyProjectName / @dayUserTrackingHourItem.MyProjectName
                                                </h6>

                                            }
                                        }



                                        <div class="item-dashboard-item w-100">

                                        </div>

                                        <div class="item-dashboard-item">
                                            <span class="badge badge-primary badge-pill m-1 bg-bmining-info">
                                                @dayUserTrackingHourItem.MyTrackedHours
                                            </span>
                                            @if (dayUserTrackingHourItem.MyTimeTimeTrackingStatus == TimeTrackingStatusEnum.WaitingForApproval)
                                            {
                                                <button @onclick="() => EditItem(dayUserTrackingHourItem)" class="btn">
                                                    <i class="btn-edit"></i>
                                                </button>
                                                <button @onclick="() => RemoveItem(weekDayUserTrackingHours, dayUserTrackingHourItem)" class="btn">
                                                    <i class="btn-delete"></i>
                                                </button> }
                                            else if (dayUserTrackingHourItem.MyTimeTimeTrackingStatus == TimeTrackingStatusEnum.Rejected)
                                            {
                                                <button @onclick="() => EditItem(dayUserTrackingHourItem)" class="bmining-btn-icon">
                                                    <i class="btn-edit"></i>
                                                </button>}
                                        </div>

                                    </div>
                                    <div class="alternate3-break"></div>



                                }
                                <div class="alternate2-break"></div>
                            </div>
                        </div>
                        <div class="alternate3-break"></div>

                    }
                }

                <button @onclick="@CopyLastWeek" class="bmining-button float-right ">@Resource.CopyLastWeek</button>
            </div>*@
    }

</div>

@code {
    [Parameter]
    public int? Day { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Year { get; set; }

    public bool IsLoading { get; set; }
    public string Email { get; set; }
    public double TotalHours { get; set; }
    public List<ProjectViewModel> Fathers = new List<ProjectViewModel>();
    public List<ReportViewModel> ListHours = new List<ReportViewModel>();
    public DashboardUserTrackingViewModel DashboardUserTracking { get; set; }


    private DateTime _mySelectedDate;
    public DateTime MySelectedDate
    {
        get { return _mySelectedDate; }
        set
        {
            _mySelectedDate = value;
            var dayOfWeek = value.DayOfWeek;
            int numberOfDay;
            switch (dayOfWeek)
            {
                case DayOfWeek.Saturday:
                    numberOfDay = 0;
                    break;
                case DayOfWeek.Sunday:
                    numberOfDay = 1;
                    break;
                case DayOfWeek.Monday:
                    numberOfDay = 2;
                    break;
                case DayOfWeek.Tuesday:
                    numberOfDay = 3;
                    break;
                case DayOfWeek.Wednesday:
                    numberOfDay = 4;
                    break;
                case DayOfWeek.Thursday:
                    numberOfDay = 5;
                    break;
                case DayOfWeek.Friday:
                    numberOfDay = 6;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            MyStartOfWeek = MySelectedDate.AddDays(-numberOfDay);

            this.StateHasChanged();
            SetDate(MyStartOfWeek).Wait();
            IsLoading = false;
        }
    }

    public DateTime MyStartOfWeek { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await base.OnInitializedAsync();
        MySelectedDate = DateTime.UtcNow;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {


            var email = await AuthenticationStateProvider.GetEmail();
            var userId = await UserDataService.GetUserId(email);
            DashboardUserTracking = new DashboardUserTrackingViewModel(TimeTrackingService);
            ListHours = await TimeTrackingService.GetUserTrackingModels(userId, MyStartOfWeek, MyStartOfWeek.AddDays(6));
            DashboardUserTracking.MyUserId = userId;
            Fathers = await ProjectDataService.ReadFathersProjects();
            if (!Day.HasValue || !Month.HasValue || !Year.HasValue)
            {
                var date = DateTime.UtcNow.ToLocalTime();
                MySelectedDate = new DateTime(date.Year, date.Month, date.Day);
            }
            else MySelectedDate = new DateTime(Year.Value, Month.Value, Day.Value);
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SetDate(DateTime fromTime)
    {
        await DashboardUserTracking.SetStartDate(fromTime);
    }

    private void AddItem(WeekDayUserTrackingHoursViewModel weekDayUserTrackingHours)
    {
        var dateTime = weekDayUserTrackingHours.ItemTime;
        NavigationManager.NavigateTo($"/addusertrackinghour/{dateTime.Day}/{dateTime.Month}/{dateTime.Year}");
    }

    private async Task RemoveItem(WeekDayUserTrackingHoursViewModel dayUserTrackingHours, WeekDayUserTrackingHoursItemViewModel weekDayUserTrackingHours)
    {
        var status = await MatDialogService.ConfirmAsync(Resource.AreYouSureToDelete);
        if (!status) return;
        await TimeTrackingService.RemoveTimeTrackingHour(weekDayUserTrackingHours.MyId);
        dayUserTrackingHours.OurWeekDayUserTrackingHourItems.Remove(weekDayUserTrackingHours);
        StateHasChanged();
    }

    private async Task EditItem(WeekDayUserTrackingHoursItemViewModel dayUserTrackingHourItem)
    {
        var answer = await MatDialogService.OpenAsync(typeof(BminingBlazor.Pages.TrackingHours.EditHours), new MatDialogOptions
        {
            CanBeClosed = true
        });
        if (answer == null)
            return;
        if ((double)answer < 0)
        {
            await MatDialogService.AlertAsync(Resource.InvalidNumber);
            return;
        }
        await TimeTrackingService.EditStatusTimeTracking(dayUserTrackingHourItem.MyId, TimeTrackingStatusEnum.WaitingForApproval, (double)answer);
        dayUserTrackingHourItem.MyTimeTimeTrackingStatus = TimeTrackingStatusEnum.WaitingForApproval;
        dayUserTrackingHourItem.MyTrackedHours = (double)answer;
        StateHasChanged();
    }

    private void NextWeek()
    {
        MySelectedDate = MySelectedDate.AddDays(7);
    }

    private void PreviousWeek()
    {
        MySelectedDate = MySelectedDate.AddDays(-7);
    }
    private string TotalHoursStatus(double totalHours, string day)
    {
        if (totalHours > 9)
        {
            return "error";
        }
        else if (totalHours == 9)
        {
            if (day == Resource.Friday)
            {
                return "error";
            }
            return "info";
        }
        else
        {
            if (day == Resource.Friday)
            {

                if (totalHours == 5)
                {
                    return "info";
                }
                else if (totalHours > 5)
                {
                    return "error";
                }
                else
                {
                    return " ";
                }

            }

            return " ";
        }
    }
    private async void CopyLastWeek()
    {
        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        var lastWeek = await TimeTrackingService.GetUserTrackingModels(userId, MyStartOfWeek.AddDays(-7), MyStartOfWeek);
        foreach (var hoursLastWeek in lastWeek)
        {
            var projectId = hoursLastWeek.MyProjectId;
            var hours = hoursLastWeek.MyTrackedHours;
            var timeTracking = hoursLastWeek.MyTimeTrackingDate.AddDays(+7);
            await TimeTrackingService.AddUserTimeTracking(userId, projectId, timeTracking, hours);
        }
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/", true);
    }

    private int NumberWeek()
    {
        int numberWeek = System.Globalization.CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(MySelectedDate, System.Globalization.CalendarWeekRule.FirstDay, MySelectedDate.DayOfWeek);
        return numberWeek;
    }
}
