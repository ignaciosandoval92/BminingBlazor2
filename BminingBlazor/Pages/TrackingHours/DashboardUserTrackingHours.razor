@page "/dashboard_tracking_hours"
@page "/dashboard_tracking_hours/{day:int}/{month:int}/{year:int}"
@using BminingBlazor.ViewModels.TrackingHours
@using Microsoft.AspNetCore.Http
@using Models.TimeTracking
@using System.Globalization
@using Humanizer
@using BminingBlazor.Pages.TrackingHours
@using BminingBlazor.ViewModels.Projects

@inject ITimeTrackingService TimeTrackingService
@inject IMatToaster MatToaster
@inject IUserDataService UserDataService
@inject NavigationManager NavigationManager
@inject IMatDialogService MatDialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

    .week-header-container {
        display: inline-grid;
        grid-template-columns: auto auto auto 1fr;
        grid-column-gap: 4px;
        align-items: center
    }

    .week-header-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
    }

    .calendar {
        font-size: 12pt;
    }

    .week-header-bmining-button {
        font-size: 30px;
        font-weight: bold;
        padding: 0px 18px;
    }


    .item-dashboard-container {
        display: inline-grid;
        grid-template-columns: auto 1fr auto;
        grid-column-gap: 0px;
        align-items: center
    }

    .item-dashboard-item {
        vertical-align: middle;
        display: inline;
        text-align: center;
        padding: 5px;
    }

    .item-dashboard-item2 {
        position: absolute;
        vertical-align: middle;
        display: inline;
        padding: 5px;
        right: 50px
    }

    .item-dashboard-border {
        margin: 5px;
        border-style: solid;
        border-radius: 4px;
        border-width: 2.5px;
    }

    .header-break {
        margin: 0px 0px 0px 16px
    }

    .line-container {
        width: 200px;
        height: 20px;
    }

    .single-line {
        width: 100%;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: pre;
    }
</style>
<div class="logo" />
<div class="line-logo" />
<div class="bmining-app">
    <h2 class="header-break">@Resource.DashboardHours</h2>

    <div class="main-break">
        <div class="main-circle"></div>
    </div>
    @if (IsLoading)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {

        <div class="week-header-container">


            <div class="week-header-item">
                <h6 class="m-2 txt">@Resource.Week <h4 class="bmining-button h4 txt"> @NumberWeek()</h4>@MyStartOfWeek.ToString("d MMMM yyyy")</h6>
            </div>



            <div class="week-header-item">

                <button class="btn-back" @onclick="@PreviousWeek">
                </button>

            </div>


            <div class="calendar">
                <MatDatePicker @bind-Value="@MySelectedDate" />
            </div>
            <div class="week-header-item">
                <button class="btn-next" @onclick="@NextWeek">
                </button>
            </div>

        </div>





        <div class="alternate1-break"></div>

        <table>
            <thead>
            <th>@Resource.Project</th>
            <th>Sab</th>
            <th>Dom</th>
            <th>Lun</th>
            <th>Mar</th>
            <th>Mie</th>
            <th>Jue</th>
            <th>Vie</th>
            <th>@Resource.Actions</th>
            </thead>
            @foreach (var i in _projects)
            {

                <tbody>
                    <tr>


                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (idsProjects1.Contains(hours.MyProjectId))
                                { }
                                else
                                {
                                    @if (hours.MyProjectId == i)
                                    {

                                        @hours.MyProjectCode <br /><txt>@hours.MyProjectName</txt>

                                        idsProjects1.Add(hours.MyProjectId);

                                    }

                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.Day)
                                    {
                                        @hours.MyTrackedHours

                                    }
                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.AddDays(1).Day)
                                    {
                                        @hours.MyTrackedHours

                                    }
                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.AddDays(2).Day)
                                    {
                                        @hours.MyTrackedHours

                                    }
                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.AddDays(3).Day)
                                    {
                                        @hours.MyTrackedHours


                                    }
                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.AddDays(4).Day)
                                    {
                                        @hours.MyTrackedHours

                                    }
                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.AddDays(5).Day)
                                    {
                                        @hours.MyTrackedHours

                                    }
                                }
                            }
                        </td>
                        <td>
                            @foreach (var hours in ListHours)
                            {
                                if (hours.MyProjectId == i)
                                {
                                    @if (hours.MyTimeTrackingDate.Day == MyStartOfWeek.AddDays(6).Day)
                                    {
                                        @hours.MyTrackedHours

                                    }
                                }
                            }
                        </td>
                        <td>
                            <button class="btn-delete" @onclick="()=>RemoveItem(i)"></button>

                        </td>

                    </tr>

                </tbody>

            }


        </table>
        <button @onclick="() => AddItem(MyStartOfWeek)" class="bmining-button ">@Resource.Load</button>
        <button @onclick="EditHours" class="bmining-button">@Resource.Edit</button>
        <button  class="bmining-button">@Resource.Send</button>
    }

</div>



@code {
    [Parameter]
    public int? Day { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Year { get; set; }

    public bool IsLoading { get; set; }
    public string Email { get; set; }
    public double TotalHours { get; set; }
    public List<ReportViewModel> ListHours = new List<ReportViewModel>();
    public DashboardUserTrackingViewModel DashboardUserTracking { get; set; }
    public List<int> _projects =new List<int>();
    public List<int> idsProjects1 = new List<int>();
    public int userId;
    private DateTime _mySelectedDate;
    public DateTime MySelectedDate
    {
        get { return _mySelectedDate; }
        set
        {
            _mySelectedDate = value;
            var dayOfWeek = value.DayOfWeek;
            int numberOfDay;
            switch (dayOfWeek)
            {
                case DayOfWeek.Saturday:
                    numberOfDay = 0;
                    break;
                case DayOfWeek.Sunday:
                    numberOfDay = 1;
                    break;
                case DayOfWeek.Monday:
                    numberOfDay = 2;
                    break;
                case DayOfWeek.Tuesday:
                    numberOfDay = 3;
                    break;
                case DayOfWeek.Wednesday:
                    numberOfDay = 4;
                    break;
                case DayOfWeek.Thursday:
                    numberOfDay = 5;
                    break;
                case DayOfWeek.Friday:
                    numberOfDay = 6;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            MyStartOfWeek = MySelectedDate.AddDays(-numberOfDay);

            this.StateHasChanged();
            SetDate(MyStartOfWeek).Wait();
            IsLoading = false;
        }
    }

    public DateTime MyStartOfWeek { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        MySelectedDate = DateTime.UtcNow;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var email = await AuthenticationStateProvider.GetEmail();
            userId = await UserDataService.GetUserId(email);
            ListHours = await TimeTrackingService.GetUserTrackingModels(userId, MyStartOfWeek.AddDays(-1), MyStartOfWeek.AddDays(6));
            DashboardUserTracking = new DashboardUserTrackingViewModel(TimeTrackingService);
            DashboardUserTracking.MyUserId = userId;
            if (!Day.HasValue || !Month.HasValue || !Year.HasValue)
            {
                var date = DateTime.UtcNow.ToLocalTime();
                MySelectedDate = new DateTime(date.Year, date.Month, date.Day);
            }
            else MySelectedDate = new DateTime(Year.Value, Month.Value, Day.Value);

            foreach (var id in ListHours)
            {
                if (!_projects.Contains(id.MyProjectId))
                {
                    _projects.Add(id.MyProjectId);
                }
            }
            IsLoading = false;
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SetDate(DateTime fromTime)
    {
        //await DashboardUserTracking.SetStartDate(fromTime);
    }

    private void AddItem(DateTime date)
    {
        _projects.Clear();
        NavigationManager.NavigateTo($"/addusertrackinghour/{date.Day}/{date.Month}/{date.Year}",true);
    }

    private async Task RemoveItem(int idProject)
    {
        _projects.Clear();
        var status = await MatDialogService.ConfirmAsync(Resource.AreYouSureToDelete);
        if (!status)
        {
            NavigationManager.NavigateTo($"/dashboard_tracking_hours", true);
        }
        else
        {
            await TimeTrackingService.RemoveWeekTrackingHoursFromProject(idProject, userId, MyStartOfWeek.AddDays(-1), MyStartOfWeek.AddDays(6));
            NavigationManager.NavigateTo($"/dashboard_tracking_hours", true);
        }

    }

    private async Task EditHours()
    {
        _projects.Clear();
        NavigationManager.NavigateTo($"/EditHours/{userId}/{MyStartOfWeek.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{MyStartOfWeek.AddDays(6).ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}", true);

    }

    private void NextWeek()
    {
        MySelectedDate = MySelectedDate.AddDays(7);
    }

    private void PreviousWeek()
    {
        MySelectedDate = MySelectedDate.AddDays(-7);
    }
    private string TotalHoursStatus(double totalHours, string day)
    {
        if (totalHours > 9)
        {
            return "error";
        }
        else if (totalHours == 9)
        {
            if (day == Resource.Friday)
            {
                return "error";
            }
            return "info";
        }
        else
        {
            if (day == Resource.Friday)
            {

                if (totalHours == 5)
                {
                    return "info";
                }
                else if (totalHours > 5)
                {
                    return "error";
                }
                else
                {
                    return " ";
                }

            }

            return " ";
        }
    }
    private async void CopyLastWeek()
    {
        var email = AuthenticationStateProvider.GetEmail();
        var userId = await UserDataService.GetUserId(await email);
        var lastWeek = await TimeTrackingService.GetUserTrackingModels(userId, MyStartOfWeek.AddDays(-7), MyStartOfWeek);
        foreach (var hoursLastWeek in lastWeek)
        {
            var projectId = hoursLastWeek.MyProjectId;
            var hours = hoursLastWeek.MyTrackedHours;
            var timeTracking = hoursLastWeek.MyTimeTrackingDate.AddDays(+7);
            await TimeTrackingService.AddUserTimeTracking(userId, projectId, timeTracking, hours);
        }
        NavigationManager.NavigateTo($"/dashboard_tracking_hours/", true);
    }

    private int NumberWeek()
    {
        int numberWeek = System.Globalization.CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(MySelectedDate, System.Globalization.CalendarWeekRule.FirstDay, MySelectedDate.DayOfWeek);
        return numberWeek;
    }
}
