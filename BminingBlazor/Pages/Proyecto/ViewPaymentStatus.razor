@page "/ViewPaymentStatus/{idproject:int}"
@using ViewModels.Projects

@inject IMatDialogService MatDialogService
@inject NavigationManager NavigationManager
@inject IProjectDataService ProjectDataService
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@*@attribute [Authorize(Roles = "Administracion")]*@

<div class="bmining-app">
    <h2>@Resource.PaymentStatus</h2>
    
    @if (_payments == null)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <div>
            <table>
                <thead>
                    <tr>
                        <th>@Resource.Name</th>
                        <th>@Resource.BillingDeadline</th>
                        <th>@Resource.PaymentDeadlineIssued</th>
                        <th>@Resource.PaymentStatus</th>
                        <th>@Resource.Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var payment in _payments)
                    {
                        <tr>
                            <td>@payment.MyName</td>
                            <td>@payment.InvoiceExpirationDate</td>
                            <td>@payment.IssueExpirationDate</td>
                            <td>
                                @{
                                    switch (payment.PaymentStatusType)
                                    {
                                        case PaymentStatusTypeEnum.NotInitiated:
                                            <p>@Resource.NotInitiated</p>
                                            break;
                                        case PaymentStatusTypeEnum.Emitted:
                                            <p>@Resource.Emitted</p>
                                            break;
                                        case PaymentStatusTypeEnum.Approved:
                                            <p>@Resource.Approved</p>
                                            break;
                                        case PaymentStatusTypeEnum.Rejected:
                                            <p>@Resource.Rejected</p>
                                            break;
                                        case PaymentStatusTypeEnum.Invoiced:
                                            <p>@Resource.Invoiced</p>
                                            break;
                                        case PaymentStatusTypeEnum.Payed:
                                            <p>@Resource.Payed</p>
                                            break;
                                        case PaymentStatusTypeEnum.NotApply:
                                            <p>@Resource.NotApply</p>
                                            break;
                                    }
                                }
                            </td>
                            <td>
                                <button class="btn-edit" @onclick="()=>EditPaymentStatus(payment.Id)"></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" class="bmining-button float-right" @onclick="@AddPayment">@Resource.AddPaymentStatus</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public int IdProject { get; set; }

    private List<PaymentViewModel> _payments;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _payments = await ProjectDataService.ReadPaymentStatusOfProject(IdProject);
            StateHasChanged();
        }
    }

    public void AddPayment()
    {
        NavigationManager.NavigateTo($"/AddPaymentStatus/{IdProject}");
    }

    public void EditPaymentStatus(int paymentId)
    {
        NavigationManager.NavigateTo($"/EditPaymentStatus/{paymentId}");
    }
}

