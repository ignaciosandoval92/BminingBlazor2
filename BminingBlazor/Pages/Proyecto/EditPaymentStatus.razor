@page "/EditPaymentStatus/{paymentId:int}"
@using BminingBlazor.ViewModels.Projects

@inject IProjectDataService ProjectDataService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@*@attribute [Authorize(Roles = "Administracion")]*@

<div class="bmining-app">
    <h2>@Resource.EditPaymentStatus</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (_newPayment != null)
    {
        <div>
            <label for="inputPayment">@Resource.PaymentStatus</label>
            <select class="form-control" id="inputPayment" @bind="_newPayment.PaymentStatusType" required>
                @foreach (var typePayment in Enum.GetValues(typeof(PaymentStatusTypeEnum)))
                {
                    <option value="@typePayment">
                        @{
                            switch (typePayment)
                            {
                                case PaymentStatusTypeEnum.NotInitiated:
                                    <p>@Resource.NotInitiated</p>
                                    break;
                                case PaymentStatusTypeEnum.Emitted:
                                    <p>@Resource.Emitted</p>
                                    break;
                                case PaymentStatusTypeEnum.Approved:
                                    <p>@Resource.Approved</p>
                                    break;
                                case PaymentStatusTypeEnum.Rejected:
                                    <p>@Resource.Rejected</p>
                                    break;
                                case PaymentStatusTypeEnum.Invoiced:
                                    <p>@Resource.Invoiced</p>
                                    break;
                                case PaymentStatusTypeEnum.Payed:
                                    <p>@Resource.Payed</p>
                                    break;
                                case PaymentStatusTypeEnum.NotApply:
                                    <p>@Resource.NotApply</p>
                                    break;
                            }
                        }
                    </option>
                }
            </select>
            <button class="bmining-button float-right" @onclick="@EditPayments">@Resource.Change</button>
        </div>
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
</div>

@code {
    [Parameter]
    public int PaymentId { get; set; }
    public PaymentViewModel DashboardPayment { get; set; }
    private PaymentViewModel _newPayment = new PaymentViewModel();


    protected override async Task OnInitializedAsync()
    {
        var viewPaymentStatus = await ProjectDataService.ReadPaymentStatus(PaymentId);
        _newPayment.Id = PaymentId;
        _newPayment.PaymentStatusType = viewPaymentStatus.PaymentStatusType;
        _newPayment.MyProjectId = viewPaymentStatus.MyProjectId;
    }

    private async Task EditPayments()
    {
        var payment = new PaymentViewModel()
        {
            PaymentStatusType = _newPayment.PaymentStatusType,
            Id = _newPayment.Id,
            MyProjectId = _newPayment.MyProjectId
        };
        await ProjectDataService.EditPaymentStatus(payment);
        NavigationManager.NavigateTo($"ViewPaymentStatus/{payment.MyProjectId}");


    }
}
