@page "/CreateProject"
@using Models
@using Microsoft.AspNetCore.Http
@using BminingBlazor.ViewModels.Projects
@using BminingBlazor.ViewModels.User
@using Models.Project
@using MemberViewModel = BminingBlazor.ViewModels.User.MemberViewModel

@inject IProjectDataService ProjectDataService
@inject NavigationManager NavigationManager
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject IClientDataService ClientDataService
@*@attribute [Authorize(Roles = "Administracion")]*@

<div class="bmining-app">

    <h2>@Resource.CreateProject</h2>

    @if (_clients != null && _users != null)
    {
        <div class="container">
            <div class="row">
                <div class="form-group col">
                    <label for="inputCode">@Resource.ProjectCode</label>
                    <input class="form-control" id="inputCode" @bind="_newCreateProjectView.MyProjectCode" />
                </div>
                <div class="form-group col">
                    <label for="inputProjectName">@Resource.ProjectName</label>
                    <input class="form-control" id="inputProjectName" @bind="_newCreateProjectView.MyProjectName" />
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="form-group col">
                    <label for="inputClient">@Resource.Client</label>
                    <select id="inputClient" class="form-control" @bind="_newCreateProjectView.MyClientId" required>
                        @foreach (var client in _clients)
                        {
                            <option value="@client.MyId">@client.MyName</option>
                        }
                    </select>
                </div>

                <div class="form-group col">
                    <label for="inputStartDate">@Resource.StartDate</label>
                    <input class="form-control" type="date" id="inputStartDate" @bind="_newCreateProjectView.MyStartDate" />
                </div>

                <div class="form-group col">
                    <label for="inputEndDate">@Resource.EndDate</label>
                    <input class="form-control" type="date" id="inputEndDate" @bind="_newCreateProjectView.MyEndDate" />
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="form-group col">
                    <label class="float-left" for="inputProjectType">@Resource.ProjectType:</label>
                    <select id="inputProjectType" class="form-control" @bind="_newCreateProjectView.MyProjectType" required>
                        @foreach (var typeProject in Enum.GetValues(typeof(ProjectTypeEnum)))
                        {
                            <option value="@typeProject">
                                @{
                                    switch (typeProject)
                                    {
                                        case ProjectTypeEnum.Commercial:
                                            @Resource.Commercial
                                            break;
                                        case ProjectTypeEnum.Internal:
                                            @Resource.Intern
                                            break;
                                        case ProjectTypeEnum.Thesis:
                                            @Resource.Thesis
                                            break;
                                    }
                                }
                            </option>
                        }
                    </select>
                </div>
                <div class="form-group col">
                    <label class="float-left" for="projectStatus">@Resource.ProjectStatus:</label>
                    <select id="projectStatus" class="form-control" @bind="_newCreateProjectView.MyProjectStatus" required>

                        @foreach (var typeStatus in Enum.GetValues(typeof(ProjectStatusEnum)))
                        {
                            <option value="@typeStatus">
                                @{
                                    switch (typeStatus)
                                    {
                                        case ProjectStatusEnum.Active:
                                            @Resource.Active
                                            break;
                                        case ProjectStatusEnum.Finished:
                                            @Resource.Finished
                                            break;
                                    }
                                }
                            </option>
                        }
                    </select>
                </div>
                <div class="form-group col">
                    <label class="float-left" for="inputEmail">  @Resource.EmailProjectManager:  </label>
                    <select id="inputEmail" class="form-control" @bind="_newCreateProjectView.MyProjectManager.MyId" required>
                        @foreach (var boss in _users)
                        {
                            <option value="@boss.MyId">@boss.MyEmail</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="alternate1-break"></div>

        <div>
            <div class="d-flex justify-content-between">
                <h4>@Resource.PaymentStatus</h4>
                <button class="btn-plus" @onclick="AddPaymentStatusCallback">
                </button>
            </div>
            @if (_paymentStatusItems.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>@Resource.Name</th>
                            <th>@Resource.PaymentDeadlineIssued</th>
                            <th>@Resource.BillingDeadline</th>
                            <th>@Resource.Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var paymentStatus in _paymentStatusItems)
                        {
                            <tr>
                                <td>
                                    <input class="w-100" @bind="@paymentStatus.MyName" />
                                </td>
                                <td>
                                    <input class="w-100" @bind="@paymentStatus.IssueExpirationDate" />
                                </td>
                                <td>
                                    <input class="w-100" @bind="@paymentStatus.InvoiceExpirationDate" />
                                </td>
                                <td>
                                    <button class="btn-delete" @onclick="() => DeletePaymentStatus(paymentStatus)">
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="alternate1-break"></div>
        <div>
            <div class="d-flex justify-content-between">
                <h4>@Resource.Members</h4>
                <button class="btn-plus" @onclick="AddMembersProjectCallback">
                </button>
            </div>
            @if (_membersProjectItems.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>@Resource.Email</th>
                            <th>@Resource.ProjectHours</th>
                            <th>@Resource.Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var membersProject in _membersProjectItems)
                        {
                            <tr>
                                <td>
                                    <div class="w-100">
                                        <select class="form-control" @bind="membersProject.MyId" required>
                                            @foreach (var emails in _users)
                                            {
                                                <option value="@emails.MyId">@emails.MyEmail</option>
                                            }
                                        </select>
                                    </div>
                                </td>
                                <td>
                                    <input type="number" step="0.1" class="w-100" @bind="@membersProject.MyProjectHours" />
                                </td>
                                <td>
                                    <button class="btn-delete" Type="button" @onclick="()=>DeleteMembersProject(membersProject)">
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <button class="bmining-button float-right" @onclick=@InsertProject>@Resource.Create </button>
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }

</div>




@code {
    private readonly ProjectViewModel _newCreateProjectView = new ProjectViewModel();
    private List<UserViewModel> _users;
    private List<PaymentViewModel> _paymentStatusItems;
    private List<MemberViewModel> _membersProjectItems;
    private List<ClientViewModel> _clients;


    private void AddPaymentStatusCallback()
    {
        _paymentStatusItems.Add(new PaymentViewModel()
        {
            InvoiceExpirationDate = DateTime.UtcNow,
            IssueExpirationDate = DateTime.UtcNow
        });
    }

    private void AddMembersProjectCallback()
    {
        _membersProjectItems.Add(new MemberViewModel());
    }

    private void DeletePaymentStatus(PaymentViewModel paymentStatus)
    {
        _paymentStatusItems.Remove(paymentStatus);
    }

    private void DeleteMembersProject(MemberViewModel membersProject)
    {
        _membersProjectItems.Remove(membersProject);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _newCreateProjectView.MyStartDate = DateTime.Today;
        _newCreateProjectView.MyEndDate = DateTime.Today;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;
        _clients = await ClientDataService.ReadClients();
        _users = await UserDataService.ReadUsers();
        _paymentStatusItems = new List<PaymentViewModel>();
        _membersProjectItems = new List<MemberViewModel>();
        _newCreateProjectView.MyProjectManager = new UserViewModel();
        StateHasChanged();
    }

    private async Task InsertProject()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity.Name;
        var creatorId = await UserDataService.GetUserId(user);
        var project = new ProjectViewModel
        {
            MyProjectCode = _newCreateProjectView.MyProjectCode,
            MyProjectName = _newCreateProjectView.MyProjectName,
            MyProjectType = _newCreateProjectView.MyProjectType,
            MyStartDate = _newCreateProjectView.MyStartDate,
            MyEndDate = _newCreateProjectView.MyEndDate,
            MyCreator = new UserViewModel { MyId = creatorId },
            MyProjectManager = _newCreateProjectView.MyProjectManager,
            MyClientId = _newCreateProjectView.MyClientId,
            MyProjectStatus = _newCreateProjectView.MyProjectStatus
        };

        foreach (var members in _membersProjectItems)
        {
            project.OurMembers.Add(members);
        }

        foreach (var paymentViewModel in _paymentStatusItems)
        {
            project.OurPayments.Add(paymentViewModel);
        }
        await ProjectDataService.CreateProject(project);
        NavigationManager.NavigateTo("/ViewProject");
    }
}
