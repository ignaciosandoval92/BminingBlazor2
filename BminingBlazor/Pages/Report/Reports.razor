@page "/Reports"
@page "/Reports/{projectId:int}/{startDate:datetime}/{endDate:datetime}"
@using BminingBlazor.ViewModels.Projects
@using BminingBlazor.ViewModels.User

@inject IDummyProjectDataService DummyProjectDataService
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMatDialogService MatDialogService
@inject IProjectDataService ProjectDataService
@inject ITimeTrackingService TimeTrackingService
@inject IReportService ReportService
@inject NavigationManager NavigationManager

<div class="bmining-app">
    <div class="d-flex flex-row w-100 justify-content-between">
        <div class="d-inline-block">
            <h2>@Resource.Report</h2>
        </div>
    </div>
   
    @if (phase == 0)
    {<div class="form-group">
            <label for="contract">@Resource.Project</label>
            <select class="form-control" id="contract" @bind="_project.MyId" required>
                @foreach (var project in ViewModel)
                {
                    <option value="@project.MyProjectId">
                        @project.MyProjectCode - @project.MyProjectName
                    </option>
                }
            </select>
        </div>
        <div class="form-group col">
            <label for="inputStartDate">@Resource.StartDate</label>
            <input class="form-control" type="date" id="inputStartDate" @bind="_project.MyStartDate" />
        </div>
        <div class="form-group col">
            <label for="inputEndDate">@Resource.EndDate</label>
            <input class="form-control" type="date" id="inputEndDate" @bind="_project.MyEndDate" />
        </div>
        <button class="bmining-button float-right" @onclick="() => SelectAllMembers(_project.MyId,_project.MyStartDate,_project.MyEndDate)">@Resource.SelectAllMembers</button>
        <button class="bmining-button float-right" @onclick="() => SelectProject(_project.MyId,_project.MyStartDate,_project.MyEndDate)">@Resource.SelectMember</button>
    }
    else
    {
        <div class="form-group">
            <label for="contract">@Resource.Members</label>
            <select class="form-control" id="contract" @bind="_member.MyId" required>

                @foreach (var member in users)
                {
                    <option value="@member.MyId">
                        @member.MyName @member.MyPaternalSurname
                    </option>
                }
            </select>
        </div>
        <button class="bmining-button float-right" @onclick="() => ReadHours(_member.MyId, _project.MyStartDate, _project.MyEndDate, projectId)">@Resource.ViewReport</button>
    }

</div>

@code {
    [Parameter]
    public int projectId { get; set; }
    [Parameter]
    public DateTime startDate { get; set; }
    [Parameter]
    public DateTime endDate { get; set; }
    public int phase { get; set; }
    public List<MemberViewModel> users { get; set; }
    public List<ProjectResumeViewModel> ViewModel { get; set; }
    private readonly ProjectViewModel _project = new ProjectViewModel();
    private readonly MemberViewModel _member = new MemberViewModel();
    protected override async Task OnInitializedAsync()
    {
        if (projectId == 0)
        {
            var email = AuthenticationStateProvider.GetEmail();
            var userId = await UserDataService.GetUserId(await email);
            var projectsBelongsUserId = await DummyProjectDataService.GetProjectWhereBelongsUserId(userId);
            ViewModel = new List<ProjectResumeViewModel>();
            ViewModel.AddRange(projectsBelongsUserId);
            _project.MyStartDate = DateTime.UtcNow;
            _project.MyEndDate = DateTime.UtcNow;
            phase = 0;
        }
        else
        {
            var members = await ProjectDataService.ReadMembers(projectId);
            _project.MyStartDate = startDate;
            _project.MyEndDate = endDate;
            phase = 1;
            users = new List<MemberViewModel>();
            users.AddRange(members);
        }
    }
    private void SelectProject(int IdProject,DateTime StartDate,DateTime EndDate)
    {
        NavigationManager.NavigateTo($"/Reports/{IdProject}/{StartDate.ToString("yyyy-MM-dd",System.Globalization.CultureInfo.InvariantCulture)}/{EndDate.ToString("yyyy-MM-dd",System.Globalization.CultureInfo.InvariantCulture)}", true);
    }
    private void SelectAllMembers(int IdProject, DateTime StartDate, DateTime EndDate)
    {
        NavigationManager.NavigateTo($"/ViewProjectReport/{StartDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{EndDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{IdProject}", true);
    }
    private  void ReadHours(int IdUser, DateTime StartDate, DateTime EndDate, int IdProject)
    {
        NavigationManager.NavigateTo($"/ViewReport/{IdUser}/{StartDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{EndDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}/{IdProject}");
    }
}

