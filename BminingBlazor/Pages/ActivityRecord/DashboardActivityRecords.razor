@page "/dashboard_activity_record"
@using BminingBlazor.ViewModels.ActivityRecord
@inject IActivityRecordService ActivityRecordService
@inject IMatDialogService MatDialogService
@inject NavigationManager NavigationManager
@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
<div class="bmining-app">
    <div class="d-flex flex-row w-100 justify-content-between">
        <div class="d-inline-block">
            <h2>@Resource.ActivityRecords</h2>
        </div>
        <div class="d-inline-block">
            <button @onclick="Create" class="btn-plus">
            </button>
        </div>
    </div>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>

    @if (ViewModel != null)
    {<div>
            <Filter ColumnTitle=@Resource.Title OnSearchTextChanged="OnSearchTextChanged"></Filter>
            <table>
                <tr>
                    <th>@Resource.Id</th>
                    <th>@Resource.Title</th>
                    <th>@Resource.Date</th>
                    <th>@Resource.Actions</th>

                </tr>

                @foreach (var dashboardActivityRecordItem in _activityRecordView)
                {
                    <tr>
                        <td>
                            @dashboardActivityRecordItem.MyId
                        </td>
                        <td>
                            @dashboardActivityRecordItem.MyTitle
                        </td>
                        <td>
                            @dashboardActivityRecordItem.MyDate
                        </td>
                        <td class="text-center">
                            @if (dashboardActivityRecordItem.CanView)
                            {
                                <button @onclick="() => View(dashboardActivityRecordItem)" class="btn-view">
                                </button>
                            }

                            @if (dashboardActivityRecordItem.CanEdit || userId == 9 || userId == 23 || userId == 14)
                            {
                                <button @onclick="() => Edit(dashboardActivityRecordItem)" class="btn-edit">
                                </button>
                            }
                            @if (dashboardActivityRecordItem.CanDelete)
                            {
                                <button @onclick="() => Remove(dashboardActivityRecordItem)" class="btn-delete">
                                </button>
                            }
                        </td>
                    </tr>
                }
            </table>
            <br />
        </div>

    }

    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    <div>
        @for (int page = 0; page < TotalPage; page++)
        {
            int pageNumber = page;

            <button class="@SelectedPage(page)" @onclick="@(()=>UpdateList(pageNumber))">@(page+1)</button>
        }
    </div>

</div>

@code {


    public DashboardActivityRecordViewModel ViewModel { get; set; }
    public List<DashboardActivityRecordItemViewModel> _activityRecordView { get; set; }
    public int PageSize { get; set; }
    public int TotalPage { get; set; }
    public int CurrentPage { get; set; }
    public int userId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            PageSize = 5;
            var email = await AuthenticationStateProvider.GetEmail();
            userId = await UserDataService.GetUserId(email);
            ViewModel = await ActivityRecordService.GetActivityRecords(userId);
            _activityRecordView = ViewModel.OurDashboardActivityRecords.Take(PageSize).ToList();
            TotalPage = (int)Math.Ceiling(ViewModel.OurDashboardActivityRecords.Count() / (decimal)PageSize);
            StateHasChanged();
        }
    }

    private async Task Remove(DashboardActivityRecordItemViewModel dashboardActivityRecordItem)
    {
        var status = await MatDialogService.ConfirmAsync(Resource.AreYouSureToDelete);
        if (!status) return;
        await ActivityRecordService.DeleteActivityRecord(dashboardActivityRecordItem.MyId);
        ViewModel.OurDashboardActivityRecords.Remove(dashboardActivityRecordItem);
        StateHasChanged();
    }

    private void Edit(DashboardActivityRecordItemViewModel dashboardActivityRecordItem)
    {
        NavigationManager.NavigateTo($"/edit_activity_record/{dashboardActivityRecordItem.MyId}");
    }

    private void Create()
    {
        NavigationManager.NavigateTo("/create_activity_record");
    }

    private void View(DashboardActivityRecordItemViewModel dashboardActivityRecordItem)
    {
        NavigationManager.NavigateTo($"/view_activity_record/{dashboardActivityRecordItem.MyId}");
    }
    private void UpdateList(int pageNumber)
    {
        _activityRecordView = ViewModel.OurDashboardActivityRecords.Skip(PageSize * pageNumber).Take(PageSize).ToList();
        CurrentPage = pageNumber;
    }
    private string SelectedPage(int selectPage)
    {
        if (CurrentPage == selectPage)
        {
            return "btn btn-info";
        }
        else
        {
            return "btn btn-secondary";
        }
    }
    private void OnSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
        string searchText = changeEventArgs.Value.ToString();

        _activityRecordView = ViewModel.OurDashboardActivityRecords.Where(act => act.MyTitle.Contains(searchText,StringComparison.CurrentCultureIgnoreCase)).ToList();

    }
}
