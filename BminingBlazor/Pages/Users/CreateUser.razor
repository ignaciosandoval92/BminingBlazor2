@page "/CreateUser"
@using ViewModels.User
@inject NavigationManager NavigationManager

@inject IUserDataService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMatDialogService MatDialogService
@attribute [Authorize(Roles = "AdminRRHH,Administracion")]

<div class="bmining-app">
    <h2>@Resource.CreateUser</h2>
    <div class="main-break">
        <div class="main-circle"></div>
    </div>



    <div class="form-group">
        <label for="email">@Resource.Email</label>
        <input class="form-control" id="email" @bind="_newUser.MyEmail" />
    </div>
    <div class="form-group">
        <label for="name">@Resource.Names</label>
        <input class="form-control" id="name" @bind="_newUser.MyName" />
    </div>
    <div class="form-group">
        <label for="paternalSurname">@Resource.PaternalLastName</label>
        <input class="form-control" id="paternalSurname" @bind="_newUser.MyPaternalSurname" />
    </div>

    <div class="form-group">
        <label for="maternalSurname">@Resource.MaternalLastName</label>
        <input class="form-control" id="maternalSurname" @bind="_newUser.MyMaternalSurname" />
    </div>
    <div class="form-group">
        <label for="rut">@Resource.Rut</label>
        <input class="form-control" id="rut" @bind="_newUser.MyRut" />
    </div>
    <div class="form-group">
        <label for="job">@Resource.Job</label>
        <input class="form-control" id="job" @bind="_newUser.MyJob" />
    </div>
    <div class="form-group">
        <label for="cellphone">@Resource.Cellphone</label>
        <input class="form-control" id="cellphone" @bind="_newUser.MyTelephone" />
    </div>
    <div class="form-group">
        <label for="direction">@Resource.HomeAddress</label>
        <input class="form-control" id="direction" @bind="_newUser.MyAddress" />
    </div>

    <div class="form-group">
        <label for="contract">@Resource.ContractType</label>
        <select class="form-control" id="contract" @bind="_newUser.MyContractType" required>
            @foreach (var typeContract in Enum.GetValues(typeof(ContractTypeEnum)))
            {
            <option value="@typeContract">
                @{
                    switch (typeContract)
                    {
                        case ContractTypeEnum.FeeContract:
                            @Resource.FeeContract
                            break;
                        case ContractTypeEnum.FixedTermContract:
                            @Resource.FixedTermContract
                            break;
                        case ContractTypeEnum.IndefiniteContract:
                            @Resource.IndefiniteContract
                            break;
                        case ContractTypeEnum.ExternalConsultant:
                            @Resource.ExternalConsultant
                            break;
                        case ContractTypeEnum.ExternalEnterprise:
                            @Resource.ExternalEnterprise
                            break;
                    }
                }
            </option>
            }
        </select>
    </div>
    <button class="bmining-button float-right " @onclick="@InsertUsers">@Resource.Create</button>
</div>

@code {
    private readonly UserViewModel _newUser = new UserViewModel();

    private async Task InsertUsers()
    {
        var user = new UserViewModel()
        {
            MyEmail = _newUser.MyEmail,
            MyName = _newUser.MyName,
            MyPaternalSurname = _newUser.MyPaternalSurname,
            MyMaternalSurname = _newUser.MyMaternalSurname,
            MyRut = _newUser.MyRut,
            MyJob = _newUser.MyJob,
            MyTelephone = _newUser.MyTelephone,
            MyAddress = _newUser.MyAddress,
            MyContractType = _newUser.MyContractType
        };

        if (string.IsNullOrEmpty(user.MyName) ||
            string.IsNullOrEmpty(user.MyEmail) ||
            string.IsNullOrEmpty(user.MyPaternalSurname) ||
            string.IsNullOrEmpty(user.MyMaternalSurname) ||
            string.IsNullOrEmpty(user.MyRut) ||
            string.IsNullOrEmpty(user.MyJob) ||
            string.IsNullOrEmpty(user.MyTelephone) ||
            string.IsNullOrEmpty(user.MyAddress))
        {
            await MatDialogService.AlertAsync(Resource.MissingInformation);
            return;
        }

        var id = await UserDataService.CreateUser(user);
        NavigationManager.NavigateTo("/viewUsers");
    }
}
