@page "/EditUser/{id:int}"
@using ViewModels.User
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserDataService UserDataService
@attribute [Authorize(Roles = "AdminRRHH,Administracion")]


<div class="bmining-app">
    <h2>@Resource.Edit @Email</h2>
    <div class="main-break">
        <div class="main-circle">
        </div>
    </div>

    @if (_userEdit != null)
    {
        <div>
            <div class="form-group">
                <label for="contract"> @Resource.ContractType</label>
                <select id="contract" class="form-control" @bind="_userEdit.MyContractType" required>

                    @foreach (var typeContract in Enum.GetValues(typeof(ContractTypeEnum)))
                    {
                    <option value="@typeContract">
                        @{
                            switch (typeContract)
                            {
                                case ContractTypeEnum.FeeContract:
                                    @Resource.FeeContract
                                    break;
                                case ContractTypeEnum.FixedTermContract:
                                    @Resource.FixedTermContract
                                    break;
                                case ContractTypeEnum.IndefiniteContract:
                                    @Resource.IndefiniteContract
                                    break;
                                case ContractTypeEnum.ExternalConsultant:
                                    @Resource.ExternalConsultant
                                    break;
                                case ContractTypeEnum.ExternalEnterprise:
                                    @Resource.ExternalEnterprise
                                    break;
                            }
                        }
                    </option>
                    }
                </select>
            </div>

        </div>

        <div>
            <div class="form-group">
                <label for="job">@Resource.Job</label>
                <input class="form-control" type="text" id="job" @bind="_userEdit.MyJob" />
            </div>
            <div class="form-group">
                <label for="telephone">@Resource.Cellphone</label>
                <input class="form-control" type="text" id="telephone" @bind="_userEdit.MyTelephone" />
            </div>
            <div class="form-group">
                <label for="direction">@Resource.HomeAddress</label>
                <input class="form-control" id="direction" @bind="_userEdit.MyAddress" />
            </div>
        </div>
        <button class="bmining-button float-right " @onclick="@EditUsers">@Resource.Save</button>
    }
    else
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public string Email { get; set; }

    private readonly UserViewModel _userEdit = new UserViewModel();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var userEditModel = await UserDataService.ReadUser(Id);
            _userEdit.MyEmail = userEditModel.MyEmail;
            _userEdit.MyName = userEditModel.MyName;
            _userEdit.MyPaternalSurname = userEditModel.MyPaternalSurname;
            _userEdit.MyMaternalSurname = userEditModel.MyMaternalSurname;
            _userEdit.MyRut = userEditModel.MyRut;
            _userEdit.MyContractType = userEditModel.MyContractType;
            _userEdit.MyJob = userEditModel.MyJob;
            _userEdit.MyTelephone = userEditModel.MyTelephone;
            _userEdit.MyAddress = userEditModel.MyAddress;
            Email = userEditModel.MyEmail;
            StateHasChanged();
        }
    }


    private async Task EditUsers()
    {
        var user = new UserViewModel()
        {
            MyJob = _userEdit.MyJob,
            MyTelephone = _userEdit.MyTelephone,
            MyAddress = _userEdit.MyAddress,
            MyContractType = _userEdit.MyContractType,
            MyId = Id
        };
        await UserDataService.EditUser(user);
        NavigationManager.NavigateTo("ViewUsers");
    }
}
